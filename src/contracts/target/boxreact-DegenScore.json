{"transpiled":true,"noir_version":"0.34.0+02fea6abe8637b9fb8f9535d1709b367d5e1da5c","name":"DegenScore","functions":[{"name":"compute_note_hash_and_optionally_a_nullifier","is_unconstrained":true,"custom_attributes":[],"abi":{"error_types":{"12265343917440897559":{"error_kind":"fmtstring","item_types":[],"length":20}},"parameters":[{"name":"contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"},"visibility":"private"},{"name":"nonce","type":{"kind":"field"},"visibility":"private"},{"name":"storage_slot","type":{"kind":"field"},"visibility":"private"},{"name":"note_type_id","type":{"kind":"field"},"visibility":"private"},{"name":"compute_nullifier","type":{"kind":"boolean"},"visibility":"private"},{"name":"serialized_note","type":{"kind":"array","length":3,"type":{"kind":"field"}},"visibility":"private"}],"return_type":{"abi_type":{"kind":"array","length":4,"type":{"kind":"field"}},"visibility":"public"}},"bytecode":"","debug_symbols":"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","brillig_names":["compute_note_hash_and_optionally_a_nullifier"]},{"name":"update_degen_score","is_unconstrained":false,"custom_attributes":["private"],"abi":{"error_types":{"12265343917440897559":{"error_kind":"fmtstring","item_types":[],"length":20}},"parameters":[{"name":"inputs","type":{"fields":[{"name":"call_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"storage_contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"aztec::protocol_types::abis::call_context::CallContext"}},{"name":"historical_header","type":{"fields":[{"name":"last_archive","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"content_commitment","type":{"fields":[{"name":"num_txs","type":{"kind":"field"}},{"name":"txs_effects_hash","type":{"kind":"field"}},{"name":"in_hash","type":{"kind":"field"}},{"name":"out_hash","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::content_commitment::ContentCommitment"}},{"name":"state","type":{"fields":[{"name":"l1_to_l2_message_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"partial","type":{"fields":[{"name":"note_hash_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"nullifier_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"public_data_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}}],"kind":"struct","path":"aztec::protocol_types::partial_state_reference::PartialStateReference"}}],"kind":"struct","path":"aztec::protocol_types::state_reference::StateReference"}},{"name":"global_variables","type":{"fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"slot_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"integer","sign":"unsigned","width":64}},{"name":"coinbase","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress"}},{"name":"fee_recipient","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"gas_fees","type":{"fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees"}}],"kind":"struct","path":"aztec::protocol_types::abis::global_variables::GlobalVariables"}},{"name":"total_fees","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::header::Header"}},{"name":"tx_context","type":{"fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"gas_settings","type":{"fields":[{"name":"gas_limits","type":{"fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::gas::Gas"}},{"name":"teardown_gas_limits","type":{"fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::gas::Gas"}},{"name":"max_fees_per_gas","type":{"fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees"}},{"name":"inclusion_fee","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::gas_settings::GasSettings"}}],"kind":"struct","path":"aztec::protocol_types::transaction::tx_context::TxContext"}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::context::inputs::private_context_inputs::PrivateContextInputs"},"visibility":"private"},{"name":"user","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"},"visibility":"private"},{"name":"eth_signature","type":{"kind":"array","length":65,"type":{"kind":"field"}},"visibility":"private"},{"name":"trading_volume","type":{"kind":"field"},"visibility":"private"},{"name":"leverage_score","type":{"kind":"field"},"visibility":"private"},{"name":"yield_farming_score","type":{"kind":"field"},"visibility":"private"},{"name":"nft_score","type":{"kind":"field"},"visibility":"private"},{"name":"risk_score","type":{"kind":"field"},"visibility":"private"},{"name":"token_diversity","type":{"kind":"field"},"visibility":"private"}],"return_type":{"abi_type":{"fields":[{"name":"call_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"storage_contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"aztec::protocol_types::abis::call_context::CallContext"}},{"name":"args_hash","type":{"kind":"field"}},{"name":"returns_hash","type":{"kind":"field"}},{"name":"min_revertible_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"is_fee_payer","type":{"kind":"boolean"}},{"name":"max_block_number","type":{"fields":[{"name":"_opt","type":{"fields":[{"name":"_is_some","type":{"kind":"boolean"}},{"name":"_value","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"std::option::Option"}}],"kind":"struct","path":"aztec::protocol_types::abis::max_block_number::MaxBlockNumber"}},{"name":"note_hash_read_requests","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::read_request::ReadRequest"}}},{"name":"nullifier_read_requests","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::read_request::ReadRequest"}}},{"name":"key_validation_requests_and_generators","type":{"kind":"array","length":16,"type":{"fields":[{"name":"request","type":{"fields":[{"name":"pk_m","type":{"fields":[{"name":"x","type":{"kind":"field"}},{"name":"y","type":{"kind":"field"}},{"name":"is_infinite","type":{"kind":"boolean"}}],"kind":"struct","path":"std::embedded_curve_ops::EmbeddedCurvePoint"}},{"name":"sk_app","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::validation_requests::key_validation_request::KeyValidationRequest"}},{"name":"sk_app_generator","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::validation_requests::key_validation_request_and_generator::KeyValidationRequestAndGenerator"}}},{"name":"note_hashes","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::note_hash::NoteHash"}}},{"name":"nullifiers","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"note_hash","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::nullifier::Nullifier"}}},{"name":"private_call_requests","type":{"kind":"array","length":4,"type":{"fields":[{"name":"contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"call_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"storage_contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"aztec::protocol_types::abis::call_context::CallContext"}},{"name":"args_hash","type":{"kind":"field"}},{"name":"returns_hash","type":{"kind":"field"}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"end_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::private_call_request::PrivateCallRequest"}}},{"name":"public_call_requests","type":{"kind":"array","length":16,"type":{"fields":[{"name":"contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"call_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"storage_contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"aztec::protocol_types::abis::call_context::CallContext"}},{"name":"args_hash","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::public_call_request::PublicCallRequest"}}},{"name":"public_teardown_call_request","type":{"fields":[{"name":"contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"call_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"storage_contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"aztec::protocol_types::abis::call_context::CallContext"}},{"name":"args_hash","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::public_call_request::PublicCallRequest"}},{"name":"l2_to_l1_msgs","type":{"kind":"array","length":2,"type":{"fields":[{"name":"recipient","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress"}},{"name":"content","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::messaging::l2_to_l1_message::L2ToL1Message"}}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"end_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"note_encrypted_logs_hashes","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"length","type":{"kind":"field"}},{"name":"note_hash_counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::log_hash::NoteLogHash"}}},{"name":"encrypted_logs_hashes","type":{"kind":"array","length":4,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"length","type":{"kind":"field"}},{"name":"randomness","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::log_hash::EncryptedLogHash"}}},{"name":"unencrypted_logs_hashes","type":{"kind":"array","length":4,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"length","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::log_hash::LogHash"}}},{"name":"historical_header","type":{"fields":[{"name":"last_archive","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"content_commitment","type":{"fields":[{"name":"num_txs","type":{"kind":"field"}},{"name":"txs_effects_hash","type":{"kind":"field"}},{"name":"in_hash","type":{"kind":"field"}},{"name":"out_hash","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::content_commitment::ContentCommitment"}},{"name":"state","type":{"fields":[{"name":"l1_to_l2_message_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"partial","type":{"fields":[{"name":"note_hash_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"nullifier_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"public_data_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}}],"kind":"struct","path":"aztec::protocol_types::partial_state_reference::PartialStateReference"}}],"kind":"struct","path":"aztec::protocol_types::state_reference::StateReference"}},{"name":"global_variables","type":{"fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"slot_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"integer","sign":"unsigned","width":64}},{"name":"coinbase","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress"}},{"name":"fee_recipient","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"gas_fees","type":{"fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees"}}],"kind":"struct","path":"aztec::protocol_types::abis::global_variables::GlobalVariables"}},{"name":"total_fees","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::header::Header"}},{"name":"tx_context","type":{"fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"gas_settings","type":{"fields":[{"name":"gas_limits","type":{"fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::gas::Gas"}},{"name":"teardown_gas_limits","type":{"fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::gas::Gas"}},{"name":"max_fees_per_gas","type":{"fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees"}},{"name":"inclusion_fee","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::gas_settings::GasSettings"}}],"kind":"struct","path":"aztec::protocol_types::transaction::tx_context::TxContext"}}],"kind":"struct","path":"aztec::protocol_types::abis::private_circuit_public_inputs::PrivateCircuitPublicInputs"},"visibility":"public"}},"bytecode":"","debug_symbols":"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","brillig_names":["unsafe_rand","get_note_internal","decompose_hint","get_key_validation_request","notify_nullified_note","notify_created_note","directive_invert"]},{"name":"calculate_degen_score","is_unconstrained":false,"custom_attributes":[],"abi":{"error_types":{},"parameters":[{"name":"data","type":{"fields":[{"name":"trading_volume","type":{"kind":"field"}},{"name":"leverage_score","type":{"kind":"field"}},{"name":"yield_farming_score","type":{"kind":"field"}},{"name":"nft_score","type":{"kind":"field"}},{"name":"risk_score","type":{"kind":"field"}},{"name":"token_diversity","type":{"kind":"field"}}],"kind":"struct","path":"DegenScore::DegenData"},"visibility":"private"}],"return_type":{"abi_type":{"kind":"field"},"visibility":"public"}},"bytecode":"H4sIAAAAAAAA/7WS3QrCMAxG3a/i0yRtsyR3vopd0/d/BDc3pEzwZvVACTTlQPOluWzcl9Ndvun3+tirMzQwEk7g2EKYjMyM2ZSzmse0wNkSIEFUikRT0pk5zsIugi9dHqYQjBelxyc4jUIQKE6CgiSUnHhvEoQ1KoNi8IaZ1Ft+w00919xWcGXYuBYuOMmvLE7+OXf1XK6v57KhYha3P2XRHbKAc+BY0VVx/7Dm/Jpih8dilut9u8907Q+H3vH9hxfRxM+xvQQAAA==","debug_symbols":"XclRCoAgDIDhu+y5E3SVCFFTGYwtTIMYu3tBPYSP//8pbCn04pCzHDAvCiTRNxR+Sm2CUJEIixv26Sv6QOnL3Dn+tF37K7baDQ==","brillig_names":[]},{"name":"get_degen_score","is_unconstrained":true,"custom_attributes":[],"abi":{"error_types":{},"parameters":[{"name":"user","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"},"visibility":"private"}],"return_type":{"abi_type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"npk_m_hash","type":{"kind":"field"}},{"name":"randomness","type":{"kind":"field"}},{"name":"header","type":{"fields":[{"name":"contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"nonce","type":{"kind":"field"}},{"name":"storage_slot","type":{"kind":"field"}},{"name":"note_hash_counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::note::note_header::NoteHeader"}}],"kind":"struct","path":"value_note::value_note::ValueNote"},"visibility":"public"}},"bytecode":"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","debug_symbols":"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","brillig_names":["get_degen_score"]},{"name":"constructor","is_unconstrained":false,"custom_attributes":["private","initializer"],"abi":{"error_types":{},"parameters":[{"name":"inputs","type":{"fields":[{"name":"call_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"storage_contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"aztec::protocol_types::abis::call_context::CallContext"}},{"name":"historical_header","type":{"fields":[{"name":"last_archive","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"content_commitment","type":{"fields":[{"name":"num_txs","type":{"kind":"field"}},{"name":"txs_effects_hash","type":{"kind":"field"}},{"name":"in_hash","type":{"kind":"field"}},{"name":"out_hash","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::content_commitment::ContentCommitment"}},{"name":"state","type":{"fields":[{"name":"l1_to_l2_message_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"partial","type":{"fields":[{"name":"note_hash_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"nullifier_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"public_data_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}}],"kind":"struct","path":"aztec::protocol_types::partial_state_reference::PartialStateReference"}}],"kind":"struct","path":"aztec::protocol_types::state_reference::StateReference"}},{"name":"global_variables","type":{"fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"slot_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"integer","sign":"unsigned","width":64}},{"name":"coinbase","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress"}},{"name":"fee_recipient","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"gas_fees","type":{"fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees"}}],"kind":"struct","path":"aztec::protocol_types::abis::global_variables::GlobalVariables"}},{"name":"total_fees","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::header::Header"}},{"name":"tx_context","type":{"fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"gas_settings","type":{"fields":[{"name":"gas_limits","type":{"fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::gas::Gas"}},{"name":"teardown_gas_limits","type":{"fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::gas::Gas"}},{"name":"max_fees_per_gas","type":{"fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees"}},{"name":"inclusion_fee","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::gas_settings::GasSettings"}}],"kind":"struct","path":"aztec::protocol_types::transaction::tx_context::TxContext"}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::context::inputs::private_context_inputs::PrivateContextInputs"},"visibility":"private"},{"name":"owner","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"},"visibility":"private"}],"return_type":{"abi_type":{"fields":[{"name":"call_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"storage_contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"aztec::protocol_types::abis::call_context::CallContext"}},{"name":"args_hash","type":{"kind":"field"}},{"name":"returns_hash","type":{"kind":"field"}},{"name":"min_revertible_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"is_fee_payer","type":{"kind":"boolean"}},{"name":"max_block_number","type":{"fields":[{"name":"_opt","type":{"fields":[{"name":"_is_some","type":{"kind":"boolean"}},{"name":"_value","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"std::option::Option"}}],"kind":"struct","path":"aztec::protocol_types::abis::max_block_number::MaxBlockNumber"}},{"name":"note_hash_read_requests","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::read_request::ReadRequest"}}},{"name":"nullifier_read_requests","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::read_request::ReadRequest"}}},{"name":"key_validation_requests_and_generators","type":{"kind":"array","length":16,"type":{"fields":[{"name":"request","type":{"fields":[{"name":"pk_m","type":{"fields":[{"name":"x","type":{"kind":"field"}},{"name":"y","type":{"kind":"field"}},{"name":"is_infinite","type":{"kind":"boolean"}}],"kind":"struct","path":"std::embedded_curve_ops::EmbeddedCurvePoint"}},{"name":"sk_app","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::validation_requests::key_validation_request::KeyValidationRequest"}},{"name":"sk_app_generator","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::validation_requests::key_validation_request_and_generator::KeyValidationRequestAndGenerator"}}},{"name":"note_hashes","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::note_hash::NoteHash"}}},{"name":"nullifiers","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"note_hash","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::nullifier::Nullifier"}}},{"name":"private_call_requests","type":{"kind":"array","length":4,"type":{"fields":[{"name":"contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"call_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"storage_contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"aztec::protocol_types::abis::call_context::CallContext"}},{"name":"args_hash","type":{"kind":"field"}},{"name":"returns_hash","type":{"kind":"field"}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"end_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::private_call_request::PrivateCallRequest"}}},{"name":"public_call_requests","type":{"kind":"array","length":16,"type":{"fields":[{"name":"contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"call_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"storage_contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"aztec::protocol_types::abis::call_context::CallContext"}},{"name":"args_hash","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::public_call_request::PublicCallRequest"}}},{"name":"public_teardown_call_request","type":{"fields":[{"name":"contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"call_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"storage_contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"aztec::protocol_types::abis::call_context::CallContext"}},{"name":"args_hash","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::public_call_request::PublicCallRequest"}},{"name":"l2_to_l1_msgs","type":{"kind":"array","length":2,"type":{"fields":[{"name":"recipient","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress"}},{"name":"content","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::messaging::l2_to_l1_message::L2ToL1Message"}}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"end_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"note_encrypted_logs_hashes","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"length","type":{"kind":"field"}},{"name":"note_hash_counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::log_hash::NoteLogHash"}}},{"name":"encrypted_logs_hashes","type":{"kind":"array","length":4,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"length","type":{"kind":"field"}},{"name":"randomness","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::log_hash::EncryptedLogHash"}}},{"name":"unencrypted_logs_hashes","type":{"kind":"array","length":4,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"length","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::log_hash::LogHash"}}},{"name":"historical_header","type":{"fields":[{"name":"last_archive","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"content_commitment","type":{"fields":[{"name":"num_txs","type":{"kind":"field"}},{"name":"txs_effects_hash","type":{"kind":"field"}},{"name":"in_hash","type":{"kind":"field"}},{"name":"out_hash","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::content_commitment::ContentCommitment"}},{"name":"state","type":{"fields":[{"name":"l1_to_l2_message_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"partial","type":{"fields":[{"name":"note_hash_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"nullifier_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"public_data_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}}],"kind":"struct","path":"aztec::protocol_types::partial_state_reference::PartialStateReference"}}],"kind":"struct","path":"aztec::protocol_types::state_reference::StateReference"}},{"name":"global_variables","type":{"fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"slot_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"integer","sign":"unsigned","width":64}},{"name":"coinbase","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress"}},{"name":"fee_recipient","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"gas_fees","type":{"fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees"}}],"kind":"struct","path":"aztec::protocol_types::abis::global_variables::GlobalVariables"}},{"name":"total_fees","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::header::Header"}},{"name":"tx_context","type":{"fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"gas_settings","type":{"fields":[{"name":"gas_limits","type":{"fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::gas::Gas"}},{"name":"teardown_gas_limits","type":{"fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::gas::Gas"}},{"name":"max_fees_per_gas","type":{"fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees"}},{"name":"inclusion_fee","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::gas_settings::GasSettings"}}],"kind":"struct","path":"aztec::protocol_types::transaction::tx_context::TxContext"}}],"kind":"struct","path":"aztec::protocol_types::abis::private_circuit_public_inputs::PrivateCircuitPublicInputs"},"visibility":"public"}},"bytecode":"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","debug_symbols":"7ZvRbts6DIbfJde9EEmRFPsqBwdDu3VDgKId2u4AB0Xf/dhpJNuJEp9OUWKvvhnmjf7866ckSrLzuvp2d/vrx5f1w/fH59X1X6+r+8evNy/rx4fm6nUFfvNvzz9vHtrL55ebp5fVNSj6q9Xdw7f2r+Tfrlbf1/d3q2t1b1d7wWgg22A0CikYmDPRxKbbaJKWdzQanKqLSpyGTgqB5OKDQAwPoaO3bdgPBpdaCUz94L+vVsCLMweckcWZA87o4swBZ0KxMxQAY1uD75wx3DzAKj8AXXluwcUHIBD2spU11AGlZHEvmtxGD5xbD3KIaFQd6Mn1HUhCzKDrDk6z7C4aB/0SMtGSenFQ7sVmdTg0STaSs7E+T2lEgW8jfr/PIy4ZmniGaMnQxDPklwz9rwwRdcWCvJ6vsiMvGZp4huRPyhD0MmRjGQJG6hqpY9EXzJEuOZp8jsK0c6Q+CkHnRnNEnHxh7PniwsRct8X187tO7pKuh7C726VT7HbTExDJjehBtmg9KoTRvfrlMoWLMwecOcHuDn1q66BX8vsTfPkTiOMiEqm3ijzgJodu/jAZzB+tHp6YHpmYnhOssiikWc0jjejxqe97CXtqwqTU2JTUeDcpNSeoPuStU+N3ZxKfncUNYt831uN8CGlWBnO9nv8+F/rsXGgSz2ks4HG+YRxYpt0qB8SyozC9ZbC+l7n1vHGIuk08jlQH4+S4c10w2qaN/hO0kQvb2FTMdJTX1OORVrJFR7jXyiw4SOSG0MfqRrbMU7bOU3aYp2w7LrsZDm5kkg3IcZINgoMHZKI9pGj2Y9EXXMiyW4zJGwPlxmjavpuDkaayJDRL73i4eUOc3Tt0NqL3g/BWPM5ZPBWLt3Tsh6Y0Il4truWak8gOnPvKQV0UoQCDdVBZrHfJEe847BRm9p/PkOZ4LBoCaruG8NJDhobI0kOGhujSQ4aGhKWHDA2xT2cINUeq22BS6UTgZsEj7ryGhO5DDuet70grBi4npreG3YrB84oBp5zQpsc7C7NLWySGULb0Evo0LfXFx26a3repjh0BnnSBLDxX7c3F7dP6/n7948vgpwKu/SP/VbykHZ3Y3qu7/Ofix2/Rj98SPn6LffiW/EfAR25prqCNzKrDdBqCvdIHTelp78ON39kHqsT0aejVTM4W2FhOPMHx0OaVdZwWmnPvHleyXOaucFM/uLUW5ikb5ymb5inbz1M2z1O2zFO2zlN2qCX7YOE6ERxdTXhxXUil1ve2AFs41oRTTbivCS+eryy+6vS2l1CpCdea8NIRymkNzb3fOGzhVhFOriYcasJLuyJT3D4x7cGlJrw0oeLj/kzE7cC9qwn3FW3xxQlNRZSFd+FSE6414aEm3CrC2dWEQ004ng6ufhdONeHFIzR9McRhD148QtPckoFLTbjWhJeOUIF05gO6C7eKcHE14VATXjpCxVGCh1041YT7mnCuCZeacK0JDzXhdjo47vZzdTXhxSM0/SpHaA9eXEPNH4ZTTbivCS8eoUfW5yo14VoTHmrCa264Qs0NV4CacKwGby6oDczvo1lTYe9/Pwp2+Hc1R255ay7/uXla39ze37UvF9v//fXwNb5rbC5f/v35/j9N8H8=","brillig_names":["get_contract_instance_internal","unsafe_rand","decompose_hint","notify_created_note","directive_invert"]}],"outputs":{"globals":{"notes":[{"fields":[{"kind":"integer","sign":false,"value":"000000000000000000000000000000000000000000000000000000003de78269"},{"kind":"string","value":"ValueNote"}],"kind":"tuple"}],"storage":[{"fields":[{"name":"degen_scores","value":{"fields":[{"name":"slot","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000001"}}],"kind":"struct"}}],"kind":"struct"}]},"structs":{"functions":[{"fields":[{"name":"parameters","type":{"fields":[{"name":"user","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"eth_signature","type":{"kind":"array","length":65,"type":{"kind":"field"}}},{"name":"trading_volume","type":{"kind":"field"}},{"name":"leverage_score","type":{"kind":"field"}},{"name":"yield_farming_score","type":{"kind":"field"}},{"name":"nft_score","type":{"kind":"field"}},{"name":"risk_score","type":{"kind":"field"}},{"name":"token_diversity","type":{"kind":"field"}}],"kind":"struct","path":"DegenScore::update_degen_score_parameters"}}],"kind":"struct","path":"DegenScore::update_degen_score_abi"},{"fields":[{"name":"parameters","type":{"fields":[{"name":"owner","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}}],"kind":"struct","path":"DegenScore::constructor_parameters"}}],"kind":"struct","path":"DegenScore::constructor_abi"}]}},"file_map":{"114":{"path":"/Users/rafi/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.56.0/noir-projects/aztec-nr/aztec/src/oracle/unsafe_rand.nr","source":"#[oracle(getRandomField)]\nunconstrained fn rand_oracle() -> Field {}\n\n// Called `unsafe_rand` because we do not constrain in circuit that we are dealing with an actual random value.\n// Instead we just trust our PXE.\nunconstrained pub fn unsafe_rand() -> Field {\n    rand_oracle()\n}\n"},"115":{"path":"/Users/rafi/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.56.0/noir-projects/aztec-nr/aztec/src/oracle/execution.nr","source":"use dep::protocol_types::address::AztecAddress;\n\n#[oracle(getContractAddress)]\nunconstrained fn get_contract_address_oracle() -> AztecAddress {}\n\n#[oracle(getBlockNumber)]\nunconstrained fn get_block_number_oracle() -> u32 {}\n\n#[oracle(getChainId)]\nunconstrained fn get_chain_id_oracle() -> Field {}\n\n#[oracle(getVersion)]\nunconstrained fn get_version_oracle() -> Field {}\n\nunconstrained pub fn get_contract_address() -> AztecAddress {\n    get_contract_address_oracle()\n}\n\nunconstrained pub fn get_block_number() -> u32 {\n    get_block_number_oracle()\n}\n\nunconstrained pub fn get_chain_id() -> Field {\n    get_chain_id_oracle()\n}\n\nunconstrained pub fn get_version() -> Field {\n    get_version_oracle()\n}\n"},"117":{"path":"/Users/rafi/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.56.0/noir-projects/aztec-nr/aztec/src/oracle/key_validation_request.nr","source":"use dep::protocol_types::abis::validation_requests::{KeyValidationRequest, key_validation_request::KEY_VALIDATION_REQUEST_LENGTH};\n\n#[oracle(getKeyValidationRequest)]\nunconstrained fn get_key_validation_request_oracle(\n    _pk_m_hash: Field,\n    _key_index: Field\n) -> [Field; KEY_VALIDATION_REQUEST_LENGTH] {}\n\nunconstrained fn get_key_validation_request_internal(\n    npk_m_hash: Field,\n    key_index: Field\n) -> KeyValidationRequest {\n    let result = get_key_validation_request_oracle(npk_m_hash, key_index);\n    KeyValidationRequest::deserialize(result)\n}\n\nunconstrained pub fn get_key_validation_request(\n    pk_m_hash: Field,\n    key_index: Field\n) -> KeyValidationRequest {\n    get_key_validation_request_internal(pk_m_hash, key_index)\n}\n"},"119":{"path":"/Users/rafi/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.56.0/noir-projects/aztec-nr/aztec/src/oracle/notes.nr","source":"use crate::note::{note_header::NoteHeader, note_interface::NoteInterface};\n\nuse dep::protocol_types::{address::AztecAddress, utils::arr_copy_slice};\n\n#[oracle(notifyCreatedNote)]\nunconstrained fn notify_created_note_oracle<let N: u32>(\n    _storage_slot: Field,\n    _note_type_id: Field,\n    _serialized_note: [Field; N],\n    _note_hash: Field,\n    _counter: u32\n) -> Field {}\n\nunconstrained pub fn notify_created_note<let N: u32>(\n    storage_slot: Field,\n    note_type_id: Field,\n    serialized_note: [Field; N],\n    note_hash: Field,\n    counter: u32\n) -> Field {\n    notify_created_note_oracle(storage_slot, note_type_id, serialized_note, note_hash, counter)\n}\n\n#[oracle(notifyNullifiedNote)]\nunconstrained fn notify_nullified_note_oracle(_nullifier: Field, _note_hash: Field, _counter: u32) -> Field {}\n\nunconstrained pub fn notify_nullified_note(nullifier: Field, note_hash: Field, counter: u32) -> Field {\n    notify_nullified_note_oracle(nullifier, note_hash, counter)\n}\n\n#[oracle(getNotes)]\nunconstrained fn get_notes_oracle<let N: u32, let S: u32>(\n    _storage_slot: Field,\n    _num_selects: u8,\n    _select_by_indexes: [u8; N],\n    _select_by_offsets: [u8; N],\n    _select_by_lengths: [u8; N],\n    _select_values: [Field; N],\n    _select_comparators: [u8; N],\n    _sort_by_indexes: [u8; N],\n    _sort_by_offsets: [u8; N],\n    _sort_by_lengths: [u8; N],\n    _sort_order: [u8; N],\n    _limit: u32,\n    _offset: u32,\n    _status: u8,\n    _return_size: u32,\n    _placeholder_fields: [Field; S]\n) -> [Field; S] {}\n\nunconstrained fn get_notes_oracle_wrapper<let N: u32, let S: u32>(\n    storage_slot: Field,\n    num_selects: u8,\n    select_by_indexes: [u8; N],\n    select_by_offsets: [u8; N],\n    select_by_lengths: [u8; N],\n    select_values: [Field; N],\n    select_comparators: [u8; N],\n    sort_by_indexes: [u8; N],\n    sort_by_offsets: [u8; N],\n    sort_by_lengths: [u8; N],\n    sort_order: [u8; N],\n    limit: u32,\n    offset: u32,\n    status: u8,\n    mut placeholder_fields: [Field; S]\n) -> [Field; S] {\n    let return_size = placeholder_fields.len() as u32;\n    get_notes_oracle(\n        storage_slot,\n        num_selects,\n        select_by_indexes,\n        select_by_offsets,\n        select_by_lengths,\n        select_values,\n        select_comparators,\n        sort_by_indexes,\n        sort_by_offsets,\n        sort_by_lengths,\n        sort_order,\n        limit,\n        offset,\n        status,\n        return_size,\n        placeholder_fields\n    )\n}\n\nunconstrained pub fn get_notes<Note, let N: u32, let M: u32, let S: u32, let NS: u32>(\n    storage_slot: Field,\n    num_selects: u8,\n    select_by_indexes: [u8; M],\n    select_by_offsets: [u8; M],\n    select_by_lengths: [u8; M],\n    select_values: [Field; M],\n    select_comparators: [u8; M],\n    sort_by_indexes: [u8; M],\n    sort_by_offsets: [u8; M],\n    sort_by_lengths: [u8; M],\n    sort_order: [u8; M],\n    limit: u32,\n    offset: u32,\n    status: u8,\n    mut placeholder_opt_notes: [Option<Note>; S], // TODO: Remove it and use `limit` to initialize the note array.\n    placeholder_fields: [Field; NS], // TODO: Remove it and use `limit` to initialize the note array.\n    _placeholder_note_length: [Field; N] // Turbofish hack? Compiler breaks calculating read_offset unless we add this parameter\n) -> [Option<Note>; S] where Note: NoteInterface<N> {\n    let fields = get_notes_oracle_wrapper(\n        storage_slot,\n        num_selects,\n        select_by_indexes,\n        select_by_offsets,\n        select_by_lengths,\n        select_values,\n        select_comparators,\n        sort_by_indexes,\n        sort_by_offsets,\n        sort_by_lengths,\n        sort_order,\n        limit,\n        offset,\n        status,\n        placeholder_fields\n    );\n    let num_notes = fields[0] as u32;\n    let contract_address = AztecAddress::from_field(fields[1]);\n    for i in 0..placeholder_opt_notes.len() {\n        if i < num_notes {\n            // lengths named as per typescript.\n            let return_header_length: u32 = 2; // num_notes & contract_address.\n            let extra_preimage_length: u32 = 2; // nonce & note_hash_counter.\n            let read_offset: u32 = return_header_length + i * (N + extra_preimage_length);\n            let nonce = fields[read_offset];\n            let note_hash_counter = fields[read_offset + 1] as u32;\n            let header = NoteHeader { contract_address, nonce, storage_slot, note_hash_counter };\n            let serialized_note = arr_copy_slice(fields, [0; N], read_offset + 2);\n            let mut note = Note::deserialize_content(serialized_note);\n            note.set_header(header);\n            placeholder_opt_notes[i] = Option::some(note);\n        };\n    }\n    placeholder_opt_notes\n}\n\n// Only ever use this in private!\n#[oracle(checkNullifierExists)]\nunconstrained fn check_nullifier_exists_oracle(_inner_nullifier: Field) -> Field {}\n\n// Only ever use this in private!\nunconstrained pub fn check_nullifier_exists(inner_nullifier: Field) -> bool {\n    check_nullifier_exists_oracle(inner_nullifier) == 1\n}\n"},"130":{"path":"/Users/rafi/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.56.0/noir-projects/aztec-nr/aztec/src/oracle/get_contract_instance.nr","source":"use dep::protocol_types::{\n    address::AztecAddress, contract_instance::ContractInstance, constants::CONTRACT_INSTANCE_LENGTH,\n    utils::reader::Reader\n};\n\n#[oracle(getContractInstance)]\nunconstrained fn get_contract_instance_oracle(_address: AztecAddress) -> [Field; CONTRACT_INSTANCE_LENGTH] {}\n\n// Returns a ContractInstance plus a boolean indicating whether the instance was found.\n#[oracle(avmOpcodeGetContractInstance)]\nunconstrained fn get_contract_instance_oracle_avm(_address: AztecAddress) -> [Field; CONTRACT_INSTANCE_LENGTH + 1] {}\n\nunconstrained fn get_contract_instance_internal(address: AztecAddress) -> [Field; CONTRACT_INSTANCE_LENGTH] {\n    get_contract_instance_oracle(address)\n}\n\nunconstrained pub fn get_contract_instance_internal_avm(address: AztecAddress) -> [Field; CONTRACT_INSTANCE_LENGTH + 1] {\n    get_contract_instance_oracle_avm(address)\n}\n\npub fn get_contract_instance(address: AztecAddress) -> ContractInstance {\n    let instance = unsafe {\n        ContractInstance::deserialize(get_contract_instance_internal(address))\n    };\n    // The to_address function combines all values in the instance object to produce an address, so by checking that we\n    // get the expected address we validate the entire struct.\n    assert_eq(instance.to_address(), address);\n\n    instance\n}\n\npub fn get_contract_instance_avm(address: AztecAddress) -> Option<ContractInstance> {\n    let mut reader = Reader::new(get_contract_instance_internal_avm(address));\n    let found = reader.read();\n    if found == 0 {\n        Option::none()\n    } else {\n        Option::some(reader.read_struct(ContractInstance::deserialize))\n    }\n}\n"},"154":{"path":"/Users/rafi/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.56.0/noir-projects/aztec-nr/aztec/src/initializer.nr","source":"use dep::protocol_types::{\n    address::AztecAddress, hash::poseidon2_hash_with_separator, constants::GENERATOR_INDEX__CONSTRUCTOR,\n    abis::function_selector::FunctionSelector\n};\n\nuse crate::{\n    context::{PrivateContext, PublicContext}, oracle::get_contract_instance::get_contract_instance,\n    oracle::get_contract_instance::get_contract_instance_avm\n};\n\npub fn mark_as_initialized_public(context: &mut PublicContext) {\n    let init_nullifier = compute_unsiloed_contract_initialization_nullifier((*context).this_address());\n    context.push_nullifier(init_nullifier);\n}\n\npub fn mark_as_initialized_private(context: &mut PrivateContext) {\n    let init_nullifier = compute_unsiloed_contract_initialization_nullifier((*context).this_address());\n    context.push_nullifier(init_nullifier);\n}\n\npub fn assert_is_initialized_public(context: &mut PublicContext) {\n    let init_nullifier = compute_unsiloed_contract_initialization_nullifier(context.this_address());\n    assert(context.nullifier_exists(init_nullifier, context.this_address()), \"Not initialized\");\n}\n\npub fn assert_is_initialized_private(context: &mut PrivateContext) {\n    let init_nullifier = compute_unsiloed_contract_initialization_nullifier(context.this_address());\n    context.push_nullifier_read_request(init_nullifier);\n}\n\nfn compute_unsiloed_contract_initialization_nullifier(address: AztecAddress) -> Field {\n    address.to_field()\n}\n\npub fn assert_initialization_matches_address_preimage_public(context: PublicContext) {\n    let address = context.this_address();\n    let instance = get_contract_instance_avm(address).unwrap();\n    let expected_init = compute_initialization_hash(context.selector(), context.get_args_hash());\n    assert(instance.initialization_hash == expected_init, \"Initialization hash does not match\");\n    assert(\n        (instance.deployer.is_zero()) | (instance.deployer == context.msg_sender()), \"Initializer address is not the contract deployer\"\n    );\n}\n\npub fn assert_initialization_matches_address_preimage_private(context: PrivateContext) {\n    let address = context.this_address();\n    let instance = get_contract_instance(address);\n    let expected_init = compute_initialization_hash(context.selector(), context.get_args_hash());\n    assert(instance.initialization_hash == expected_init, \"Initialization hash does not match\");\n    assert(\n        (instance.deployer.is_zero()) | (instance.deployer == context.msg_sender()), \"Initializer address is not the contract deployer\"\n    );\n}\n\npub fn compute_initialization_hash(init_selector: FunctionSelector, init_args_hash: Field) -> Field {\n    poseidon2_hash_with_separator(\n        [init_selector.to_field(), init_args_hash],\n        GENERATOR_INDEX__CONSTRUCTOR\n    )\n}\n"},"155":{"path":"/Users/rafi/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.56.0/noir-projects/aztec-nr/aztec/src/hash.nr","source":"use dep::protocol_types::{\n    address::{AztecAddress, EthAddress},\n    constants::{GENERATOR_INDEX__SECRET_HASH, GENERATOR_INDEX__MESSAGE_NULLIFIER, GENERATOR_INDEX__FUNCTION_ARGS},\n    point::Point, traits::Hash,\n    hash::{sha256_to_field, poseidon2_hash_with_separator, poseidon2_hash_with_separator_slice}\n};\nuse crate::oracle::logs_traits::ToBytesForUnencryptedLog;\n\npub use dep::protocol_types::hash::{compute_siloed_nullifier, pedersen_hash};\n\npub fn pedersen_commitment<let N: u32>(inputs: [Field; N], hash_index: u32) -> Point {\n    std::hash::pedersen_commitment_with_separator(inputs, hash_index)\n}\n\npub fn compute_secret_hash(secret: Field) -> Field {\n    poseidon2_hash_with_separator([secret], GENERATOR_INDEX__SECRET_HASH)\n}\n\npub fn compute_unencrypted_log_hash<T, let N: u32, let M: u32>(\n    contract_address: AztecAddress,\n    log: T\n) -> Field where T: ToBytesForUnencryptedLog<N, M> {\n    let message_bytes: [u8; N] = log.to_be_bytes_arr();\n    // can't use N - not in scope error\n    let n = message_bytes.len();\n    let mut hash_bytes = [0; M];\n    // Address is converted to 32 bytes in ts\n    let address_bytes = contract_address.to_be_bytes_arr();\n    for i in 0..32 {\n        hash_bytes[i] = address_bytes[i];\n    }\n    let len_bytes: [u8; 4] = (n as Field).to_be_bytes();\n    for i in 0..4 {\n        hash_bytes[32 + i] = len_bytes[i];\n    }\n    for i in 0..n {\n        hash_bytes[36 + i] = message_bytes[i];\n    }\n\n    sha256_to_field(hash_bytes)\n}\n\npub fn compute_message_hash(\n    sender: EthAddress,\n    chain_id: Field,\n    recipient: AztecAddress,\n    version: Field,\n    content: Field,\n    secret_hash: Field\n) -> Field {\n    let mut hash_bytes = [0 as u8; 192];\n    let sender_bytes: [u8; 32] = sender.to_field().to_be_bytes();\n    let chain_id_bytes: [u8; 32] = chain_id.to_be_bytes();\n    let recipient_bytes: [u8; 32] = recipient.to_field().to_be_bytes();\n    let version_bytes: [u8; 32] = version.to_be_bytes();\n    let content_bytes: [u8; 32] = content.to_be_bytes();\n    let secret_hash_bytes: [u8; 32] = secret_hash.to_be_bytes();\n\n    for i in 0..32 {\n        hash_bytes[i] = sender_bytes[i];\n        hash_bytes[i + 32] = chain_id_bytes[i];\n        hash_bytes[i + 64] = recipient_bytes[i];\n        hash_bytes[i + 96] = version_bytes[i];\n        hash_bytes[i + 128] = content_bytes[i];\n        hash_bytes[i + 160] = secret_hash_bytes[i];\n    }\n\n    sha256_to_field(hash_bytes)\n}\n\n// The nullifier of a l1 to l2 message is the hash of the message salted with the secret and index of the message hash\n// in the L1 to L2 message tree\npub fn compute_message_nullifier(message_hash: Field, secret: Field, leaf_index: Field) -> Field {\n    poseidon2_hash_with_separator(\n        [message_hash, secret, leaf_index],\n        GENERATOR_INDEX__MESSAGE_NULLIFIER\n    )\n}\n\npub struct ArgsHasher {\n    fields: [Field],\n}\n\nimpl Hash for ArgsHasher {\n    fn hash(self) -> Field {\n        hash_args(self.fields)\n    }\n}\n\nimpl ArgsHasher {\n    pub fn new() -> Self {\n        Self { fields: [] }\n    }\n\n    pub fn add(&mut self, field: Field) {\n        self.fields = self.fields.push_back(field);\n    }\n\n    pub fn add_multiple<let N: u32>(&mut self, fields: [Field; N]) {\n        for i in 0..N {\n            self.fields = self.fields.push_back(fields[i]);\n        }\n    }\n}\n\npub fn hash_args_array<let N: u32>(args: [Field; N]) -> Field {\n    if args.len() == 0 {\n        0\n    } else {\n        poseidon2_hash_with_separator(args, GENERATOR_INDEX__FUNCTION_ARGS)\n    }\n}\n\npub fn hash_args(args: [Field]) -> Field {\n    if args.len() == 0 {\n        0\n    } else {\n        poseidon2_hash_with_separator_slice(args, GENERATOR_INDEX__FUNCTION_ARGS)\n    }\n}\n\n#[test]\nunconstrained fn compute_var_args_hash() {\n    let mut input = ArgsHasher::new();\n    for i in 0..100 {\n        input.add(i as Field);\n    }\n    let hash = input.hash();\n    dep::std::println(hash);\n    assert(hash == 0x19b0d74feb06ebde19edd85a28986c97063e84b3b351a8b666c7cac963ce655f);\n}\n\n#[test]\nunconstrained fn compute_unenc_log_hash_array() {\n    let contract_address = AztecAddress::from_field(0x233a3e0df23b2b15b324194cb4a151f26c0b7333250781d34cc269d85dc334c6);\n    let log = [\n        0x20660de09f35f876e3e69d227b2a35166ad05f09d82d06366ec9b6f65a51fec2,\n        0x1b52bfe3b8689761916f76dc3d38aa8810860db325cd39ca611eed980091f01c,\n        0x2e559c4045c378a56ad13b9edb1e8de4e7ad3b3aa35cc7ba9ec77f7a68fa43a4,\n        0x25d0f689c4a4178a29d59306f2675824d19be6d25e44fa03b03f49c263053dd2,\n        0x2d513a722d6f352dc0961f156afdc5e31495b9f0e35cb069261a8e55e2df67fd\n    ];\n    let hash = compute_unencrypted_log_hash(contract_address, log);\n    assert(hash == 0x0095b2d17ab72f4b27a341f7ac63e49ec73935ae8c9181a0ac02023eb12f3284);\n}\n\n#[test]\nunconstrained fn compute_unenc_log_hash_addr() {\n    let contract_address = AztecAddress::from_field(0x233a3e0df23b2b15b324194cb4a151f26c0b7333250781d34cc269d85dc334c6);\n    let log = AztecAddress::from_field(0x26aa302d4715fd8a687453cb26d616b0768027bd54bcae56b09d908ecd9f8303);\n    let hash = compute_unencrypted_log_hash(contract_address, log);\n    assert(hash == 0x0083ab647dfb26e7ddee90a0f4209d049d4660cab42000c544b986aaa84c55a3);\n}\n\n#[test]\nunconstrained fn compute_unenc_log_hash_str() {\n    let contract_address = AztecAddress::from_field(0x1b401e1146c5c507962287065c81f0ef7590adae3802c533d7549d6bf0a41bd8);\n    let log = \"dummy\";\n    let hash = compute_unencrypted_log_hash(contract_address, log);\n    assert(hash == 0x00629e88ebd6374f44aa6cfe07e251ecf07213ebc7267e8f6b578ae57ffd6c20);\n}\n\n#[test]\nunconstrained fn compute_unenc_log_hash_longer_str() {\n    let contract_address = AztecAddress::from_field(0x1b401e1146c5c507962287065c81f0ef7590adae3802c533d7549d6bf0a41bd8);\n    let log = \"Hello this is a string\";\n    let hash = compute_unencrypted_log_hash(contract_address, log);\n    assert(hash == 0x0098637962f7d34fa202b7ffad8a07a238c5d1fd897b82a108f7f467fa73b841);\n}\n"},"160":{"path":"/Users/rafi/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.56.0/noir-projects/aztec-nr/aztec/src/keys/getters/mod.nr","source":"use dep::protocol_types::address::AztecAddress;\nuse crate::{\n    oracle::{keys::get_public_keys_and_partial_address, key_validation_request::get_key_validation_request},\n    keys::{public_keys::PublicKeys, constants::{NULLIFIER_INDEX, OUTGOING_INDEX}}\n};\n\nmod test;\n\nunconstrained pub fn get_nsk_app(npk_m_hash: Field) -> Field {\n    get_key_validation_request(npk_m_hash, NULLIFIER_INDEX).sk_app\n}\n\n// A helper function that gets app-siloed outgoing viewing key for a given `ovpk_m_hash`. This function is used\n// in unconstrained contexts only - when computing unconstrained note logs. The safe alternative is `request_ovsk_app`\n// function defined on `PrivateContext`.\nunconstrained pub fn get_ovsk_app(ovpk_m_hash: Field) -> Field {\n    get_key_validation_request(ovpk_m_hash, OUTGOING_INDEX).sk_app\n}\n\n// Returns all public keys for a given account, applying proper constraints to the context. We read all\n// keys at once since the constraints for reading them all are actually fewer than if we read them one at a time - any\n// read keys that are not required by the caller can simply be discarded.\npub fn get_public_keys(account: AztecAddress) -> PublicKeys {\n    let (hinted_canonical_public_keys, partial_address) = unsafe {\n        get_public_keys_and_partial_address(account)\n    };\n    assert_eq(\n        account, AztecAddress::compute(hinted_canonical_public_keys.hash(), partial_address), \"Invalid public keys hint for address\"\n    );\n\n    hinted_canonical_public_keys\n}\n"},"167":{"path":"/Users/rafi/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.56.0/noir-projects/aztec-nr/aztec/src/state_vars/private_mutable.nr","source":"use dep::protocol_types::{constants::GENERATOR_INDEX__INITIALIZATION_NULLIFIER, hash::poseidon2_hash_with_separator};\n\nuse crate::context::{PrivateContext, UnconstrainedContext};\nuse crate::note::{\n    lifecycle::{create_note, destroy_note_unsafe}, note_getter::{get_note, view_notes},\n    note_interface::{NoteInterface, NullifiableNote}, note_viewer_options::NoteViewerOptions,\n    note_emission::NoteEmission\n};\nuse crate::oracle::notes::check_nullifier_exists;\nuse crate::state_vars::storage::Storage;\n\n// docs:start:struct\npub struct PrivateMutable<Note, Context> {\n    context: Context,\n    storage_slot: Field\n}\n// docs:end:struct\n\nmod test;\n\nimpl<T, Context> Storage<T> for PrivateMutable<T, Context> {}\n\nimpl<Note, Context> PrivateMutable<Note, Context> {\n    // docs:start:new\n    pub fn new(context: Context, storage_slot: Field) -> Self {\n        assert(storage_slot != 0, \"Storage slot 0 not allowed. Storage slots must start from 1.\");\n        Self { context, storage_slot }\n    }\n    // docs:end:new\n\n    // The following computation is leaky, in that it doesn't hide the storage slot that has been initialized, nor does it hide the contract address of this contract.\n    // When this initialization nullifier is emitted, an observer could do a dictionary or rainbow attack to learn the preimage of this nullifier to deduce the storage slot and contract address.\n    // For some applications, leaking the details that a particular state variable of a particular contract has been initialized will be unacceptable.\n    // Under such circumstances, such application developers might wish to _not_ use this state variable type.\n    // This is especially dangerous for initial assignment to elements of a `Map<AztecAddress, PrivateMutable>` type (for example), because the storage slot often also identifies an actor. e.g.\n    // the initial assignment to `my_map.at(msg.sender)` will leak: `msg.sender`, the fact that an element of `my_map` was assigned-to for the first time, and the contract_address.\n    // Note: subsequent nullification of this state variable, via the `replace` method will not be leaky, if the `compute_nullifier()` method of the underlying note is designed to ensure privacy.\n    // For example, if the `compute_nullifier()` method injects the secret key of a note owner into the computed nullifier's preimage.\n    pub fn compute_initialization_nullifier(self) -> Field {\n        poseidon2_hash_with_separator(\n            [self.storage_slot],\n            GENERATOR_INDEX__INITIALIZATION_NULLIFIER\n        )\n    }\n}\n\nimpl<Note, let N: u32> PrivateMutable<Note, &mut PrivateContext> where Note: NoteInterface<N> + NullifiableNote {\n    // docs:start:initialize\n    pub fn initialize(self, note: &mut Note) -> NoteEmission<Note> {\n        // Nullify the storage slot.\n        let nullifier = self.compute_initialization_nullifier();\n        self.context.push_nullifier(nullifier);\n\n        create_note(self.context, self.storage_slot, note)\n    }\n    // docs:end:initialize\n\n    // docs:start:replace\n    pub fn replace(self, new_note: &mut Note) -> NoteEmission<Note> {\n        let (prev_note, note_hash_for_read_request): (Note, Field) = get_note(self.context, self.storage_slot);\n\n        // Nullify previous note.\n        destroy_note_unsafe(self.context, prev_note, note_hash_for_read_request);\n\n        // Add replacement note.\n        create_note(self.context, self.storage_slot, new_note)\n    }\n    // docs:end:replace\n\n    pub fn initialize_or_replace(self, note: &mut Note) -> NoteEmission<Note> {\n        let is_initialized = unsafe {\n            check_nullifier_exists(self.compute_initialization_nullifier())\n        };\n\n        // check_nullifier_exists() is an unconstrained function - we can constrain a true value by providing an\n        // inclusion proof of the nullifier, but cannot constrain a false value since a non-inclusion proof would only\n        // be valid if done in public.\n        // Ultimately, this is not an issue ginen that we'll either:\n        //  - initialize the state variable, which would fail if it was already initialized due to the duplicate\n        //    nullifier, or\n        //  - replace the current value, which would fail if it was not initialized since we wouldn't be able to produce\n        //    an inclusion proof for the current note\n        // This means that an honest oracle will assist the prover to produce a valid proof, while a malicious oracle\n        // (i.e. one that returns an incorrect value for is_initialized) will simply fail to produce a proof.\n        if (!is_initialized) {\n            self.initialize(note)\n        } else {\n            self.replace(note)\n        }\n    }\n\n    // docs:start:get_note\n    pub fn get_note(self) -> NoteEmission<Note> {\n        let mut (note, note_hash_for_read_request) = get_note(self.context, self.storage_slot);\n\n        // Nullify current note to make sure it's reading the latest note.\n        destroy_note_unsafe(self.context, note, note_hash_for_read_request);\n\n        // Add the same note again.\n        // Because a nonce is added to every note in the kernel, its nullifier will be different.\n        create_note(self.context, self.storage_slot, &mut note)\n    }\n    // docs:end:get_note\n}\n\nimpl<Note, let N: u32> PrivateMutable<Note, UnconstrainedContext> where Note: NoteInterface<N> + NullifiableNote {\n    unconstrained pub fn is_initialized(self) -> bool {\n        let nullifier = self.compute_initialization_nullifier();\n        check_nullifier_exists(nullifier)\n    }\n\n    // docs:start:view_note\n    unconstrained pub fn view_note(self) -> Note {\n        let mut options = NoteViewerOptions::new();\n        view_notes(self.storage_slot, options.set_limit(1)).get(0)\n    }\n    // docs:end:view_note\n}\n"},"169":{"path":"/Users/rafi/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.56.0/noir-projects/aztec-nr/aztec/src/state_vars/map.nr","source":"use dep::protocol_types::{storage::map::derive_storage_slot_in_map, traits::ToField};\nuse crate::state_vars::storage::Storage;\n\n// docs:start:map\npub struct Map<K, V, Context> {\n    context: Context,\n    storage_slot: Field,\n    state_var_constructor: fn(Context, Field) -> V,\n}\n// docs:end:map\n\nimpl<K, T, Context> Storage<T> for Map<K, T, Context> {}\n\nimpl<K, V, Context> Map<K, V, Context> {\n    // docs:start:new\n    pub fn new(\n        context: Context,\n        storage_slot: Field,\n        state_var_constructor: fn(Context, Field) -> V\n    ) -> Self {\n        assert(storage_slot != 0, \"Storage slot 0 not allowed. Storage slots must start from 1.\");\n        Map { context, storage_slot, state_var_constructor }\n    }\n    // docs:end:new\n\n    // docs:start:at\n    pub fn at(self, key: K) -> V where K: ToField {\n        // TODO(#1204): use a generator index for the storage slot\n        let derived_storage_slot = derive_storage_slot_in_map(self.storage_slot, key);\n\n        let state_var_constructor = self.state_var_constructor;\n        state_var_constructor(self.context, derived_storage_slot)\n    }\n    // docs:end:at\n}\n"},"223":{"path":"/Users/rafi/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.56.0/noir-projects/noir-protocol-circuits/crates/types/src/abis/validation_requests/key_validation_request.nr","source":"use crate::{traits::{Empty, Serialize, Deserialize}, point::Point};\npub use crate::constants::KEY_VALIDATION_REQUEST_LENGTH;\n\npub struct KeyValidationRequest {\n    pk_m: Point,\n    sk_app: Field, // not a grumpkin scalar because it's output of poseidon2\n}\n\nimpl Eq for KeyValidationRequest {\n    fn eq(self, request: KeyValidationRequest) -> bool {\n        (request.pk_m.eq(self.pk_m)) & (request.sk_app.eq(self.sk_app))\n    }\n}\n\nimpl Empty for KeyValidationRequest {\n    fn empty() -> Self {\n        KeyValidationRequest { pk_m: Point::empty(), sk_app: 0 }\n    }\n}\n\nimpl Serialize<KEY_VALIDATION_REQUEST_LENGTH> for KeyValidationRequest {\n    fn serialize(self) -> [Field; KEY_VALIDATION_REQUEST_LENGTH] {\n        [\n            self.pk_m.x,\n            self.pk_m.y,\n            self.pk_m.is_infinite as Field,\n            self.sk_app\n        ]\n    }\n}\n\nimpl Deserialize<KEY_VALIDATION_REQUEST_LENGTH> for KeyValidationRequest {\n    fn deserialize(fields: [Field; KEY_VALIDATION_REQUEST_LENGTH]) -> Self {\n        Self { pk_m: Point { x: fields[0], y: fields[1], is_infinite: fields[2] as bool }, sk_app: fields[3] }\n    }\n}\n"},"24":{"path":"std/embedded_curve_ops.nr","source":"use crate::ops::arith::{Add, Sub, Neg};\nuse crate::cmp::Eq;\n\n/// A point on the embedded elliptic curve\n/// By definition, the base field of the embedded curve is the scalar field of the proof system curve, i.e the Noir Field.\n/// x and y denotes the Weierstrass coordinates of the point, if is_infinite is false.\npub struct EmbeddedCurvePoint {\n    x: Field,\n    y: Field,\n    is_infinite: bool\n}\n\nimpl EmbeddedCurvePoint {\n    /// Elliptic curve point doubling operation\n    /// returns the doubled point of a point P, i.e P+P\n    fn double(self) -> EmbeddedCurvePoint {\n        embedded_curve_add(self, self)\n    }\n\n    /// Returns the null element of the curve; 'the point at infinity'\n    fn point_at_infinity() -> EmbeddedCurvePoint {\n        EmbeddedCurvePoint { x: 0, y: 0, is_infinite: true }\n    }\n}\n\nimpl Add for EmbeddedCurvePoint {\n    /// Adds two points P+Q, using the curve addition formula, and also handles point at infinity\n    fn add(self, other: EmbeddedCurvePoint) -> EmbeddedCurvePoint {\n        embedded_curve_add(self, other)\n    }\n}\n\nimpl Sub for EmbeddedCurvePoint {\n    /// Points subtraction operation, using addition and negation\n    fn sub(self, other: EmbeddedCurvePoint) -> EmbeddedCurvePoint {\n        self + other.neg()\n    }\n}\n\nimpl Neg for EmbeddedCurvePoint {\n    /// Negates a point P, i.e returns -P, by negating the y coordinate.\n    /// If the point is at infinity, then the result is also at infinity.\n    fn neg(self) -> EmbeddedCurvePoint {\n        EmbeddedCurvePoint { x: self.x, y: -self.y, is_infinite: self.is_infinite }\n    }\n}\n\nimpl Eq for EmbeddedCurvePoint {\n    /// Checks whether two points are equal\n    fn eq(self: Self, b: EmbeddedCurvePoint) -> bool {\n        (self.is_infinite & b.is_infinite)\n            | ((self.is_infinite == b.is_infinite) & (self.x == b.x) & (self.y == b.y))\n    }\n}\n\n/// Scalar for the embedded curve represented as low and high limbs\n/// By definition, the scalar field of the embedded curve is base field of the proving system curve.\n/// It may not fit into a Field element, so it is represented with two Field elements; its low and high limbs.\npub struct EmbeddedCurveScalar {\n    lo: Field,\n    hi: Field,\n}\n\nimpl EmbeddedCurveScalar {\n    pub fn new(lo: Field, hi: Field) -> Self {\n        EmbeddedCurveScalar { lo, hi }\n    }\n\n    #[field(bn254)]\n    fn from_field(scalar: Field) -> EmbeddedCurveScalar {\n        let (a,b) = crate::field::bn254::decompose(scalar);\n        EmbeddedCurveScalar { lo: a, hi: b }\n    }\n\n    //Bytes to scalar: take the first (after the specified offset) 16 bytes of the input as the lo value, and the next 16 bytes as the hi value\n    #[field(bn254)]\n    fn from_bytes(bytes: [u8; 64], offset: u32) -> EmbeddedCurveScalar {\n        let mut v = 1;\n        let mut lo = 0 as Field;\n        let mut hi = 0 as Field;\n        for i in 0..16 {\n            lo = lo + (bytes[offset+31 - i] as Field) * v;\n            hi = hi + (bytes[offset+15 - i] as Field) * v;\n            v = v * 256;\n        }\n        let sig_s = crate::embedded_curve_ops::EmbeddedCurveScalar { lo, hi };\n        sig_s\n    }\n}\n\nimpl Eq for EmbeddedCurveScalar {\n    fn eq(self, other: Self) -> bool {\n        (other.hi == self.hi) & (other.lo == self.lo)\n    }\n}\n\n// Computes a multi scalar multiplication over the embedded curve.\n// For bn254, We have Grumpkin and Baby JubJub.\n// For bls12-381, we have JubJub and Bandersnatch.\n//\n// The embedded curve being used is decided by the \n// underlying proof system.\n// docs:start:multi_scalar_mul\npub fn multi_scalar_mul<let N: u32>(\n    points: [EmbeddedCurvePoint; N],\n    scalars: [EmbeddedCurveScalar; N]\n) -> EmbeddedCurvePoint\n// docs:end:multi_scalar_mul\n{\n    let point_array = multi_scalar_mul_array_return(points, scalars);\n    EmbeddedCurvePoint { x: point_array[0], y: point_array[1], is_infinite: point_array[2] as bool }\n}\n\n#[foreign(multi_scalar_mul)]\nfn multi_scalar_mul_array_return<let N: u32>(points: [EmbeddedCurvePoint; N], scalars: [EmbeddedCurveScalar; N]) -> [Field; 3] {}\n\n#[foreign(multi_scalar_mul)]\npub(crate) fn multi_scalar_mul_slice(points: [EmbeddedCurvePoint], scalars: [EmbeddedCurveScalar]) -> [Field; 3] {}\n\n// docs:start:fixed_base_scalar_mul\npub fn fixed_base_scalar_mul(scalar: EmbeddedCurveScalar) -> EmbeddedCurvePoint\n// docs:end:fixed_base_scalar_mul\n{\n    let g1 = EmbeddedCurvePoint { x: 1, y: 17631683881184975370165255887551781615748388533673675138860, is_infinite: false };\n    multi_scalar_mul([g1], [scalar])\n}\n\n/// This function only assumes that the points are on the curve\n/// It handles corner cases around the infinity point causing some overhead compared to embedded_curve_add_not_nul and embedded_curve_add_unsafe\n// This is a hack because returning an `EmbeddedCurvePoint` from a foreign function in brillig returns a [BrilligVariable::SingleAddr; 2] rather than BrilligVariable::BrilligArray\n// as is defined in the brillig bytecode format. This is a workaround which allows us to fix this without modifying the serialization format.\n// docs:start:embedded_curve_add\npub fn embedded_curve_add(point1: EmbeddedCurvePoint, point2: EmbeddedCurvePoint) -> EmbeddedCurvePoint {\n    // docs:end:embedded_curve_add\n    let x_coordinates_match = point1.x == point2.x;\n    let y_coordinates_match = point1.y == point2.y;\n    let double_predicate = (x_coordinates_match & y_coordinates_match);\n    let infinity_predicate = (x_coordinates_match & !y_coordinates_match);\n    let point1_1 = EmbeddedCurvePoint { x: point1.x + (x_coordinates_match as Field), y: point1.y, is_infinite: x_coordinates_match };\n    // point1_1 is guaranteed to have a different abscissa than point2\n    let mut result = embedded_curve_add_unsafe(point1_1, point2);\n    result.is_infinite = x_coordinates_match;\n\n    // dbl if x_match, y_match\n    let double = embedded_curve_add_unsafe(point1, point1);\n    result = if double_predicate { double } else { result };\n\n    // infinity if x_match, !y_match\n    if point1.is_infinite {\n        result= point2;\n    }\n    if point2.is_infinite {\n        result = point1;\n    }\n    let mut result_is_infinity = infinity_predicate & (!point1.is_infinite & !point2.is_infinite);\n    result.is_infinite = result_is_infinity | (point1.is_infinite & point2.is_infinite);\n    result\n}\n\n#[foreign(embedded_curve_add)]\nfn embedded_curve_add_array_return(_point1: EmbeddedCurvePoint, _point2: EmbeddedCurvePoint) -> [Field; 3] {}\n\n/// This function assumes that:\n/// The points are on the curve, and\n/// The points don't share an x-coordinate, and\n/// Neither point is the infinity point.\n/// If it is used with correct input, the function ensures the correct non-zero result is returned.\n/// Except for points on the curve, the other assumptions are checked by the function. It will cause assertion failure if they are not respected.\npub fn embedded_curve_add_not_nul(point1: EmbeddedCurvePoint, point2: EmbeddedCurvePoint) -> EmbeddedCurvePoint {\n    assert(point1.x != point2.x);\n    assert(!point1.is_infinite);\n    assert(!point2.is_infinite);\n    embedded_curve_add_unsafe(point1, point2)\n}\n\n/// Unsafe ec addition\n/// If the inputs are the same, it will perform a doubling, but only if point1 and point2 are the same variable.\n/// If they have the same value but are different variables, the result will be incorrect because in this case\n/// it assumes (but does not check) that the points' x-coordinates are not equal.\n/// It also assumes neither point is the infinity point.\npub fn embedded_curve_add_unsafe(point1: EmbeddedCurvePoint, point2: EmbeddedCurvePoint) -> EmbeddedCurvePoint {\n    let point_array = embedded_curve_add_array_return(point1, point2);\n    let x = point_array[0];\n    let y = point_array[1];\n\n    EmbeddedCurvePoint { x, y, is_infinite: false }\n}\n"},"25":{"path":"std/field/bn254.nr","source":"use crate::runtime::is_unconstrained;\n\n// The low and high decomposition of the field modulus\nglobal PLO: Field = 53438638232309528389504892708671455233;\nglobal PHI: Field = 64323764613183177041862057485226039389;\n\nglobal TWO_POW_128: Field = 0x100000000000000000000000000000000;\n\n// Decomposes a single field into two 16 byte fields.\nfn compute_decomposition(x: Field) -> (Field, Field) {\n    let x_bytes: [u8; 32] = x.to_le_bytes();\n\n    let mut low: Field = 0;\n    let mut high: Field = 0;\n\n    let mut offset = 1;\n    for i in 0..16 {\n        low += (x_bytes[i] as Field) * offset;\n        high += (x_bytes[i + 16] as Field) * offset;\n        offset *= 256;\n    }\n\n    (low, high)\n}\n\nunconstrained pub(crate) fn decompose_hint(x: Field) -> (Field, Field) {\n    compute_decomposition(x)\n}\n\nfn compute_lt(x: Field, y: Field, num_bytes: u32) -> bool {\n    let x_bytes: [u8; 32] = x.to_le_bytes();\n    let y_bytes: [u8; 32] = y.to_le_bytes();\n    let mut x_is_lt = false;\n    let mut done = false;\n    for i in 0..num_bytes {\n        if (!done) {\n            let x_byte = x_bytes[num_bytes - 1 - i];\n            let y_byte = y_bytes[num_bytes - 1 - i];\n            let bytes_match = x_byte == y_byte;\n            if !bytes_match {\n                x_is_lt = x_byte < y_byte;\n                done = true;\n            }\n        }\n    }\n    x_is_lt\n}\n\nfn compute_lte(x: Field, y: Field, num_bytes: u32) -> bool {\n    if x == y {\n        true\n    } else {\n        compute_lt(x, y, num_bytes)\n    }\n}\n\nunconstrained fn lt_32_hint(x: Field, y: Field) -> bool {\n    compute_lt(x, y, 32)\n}\n\nunconstrained fn lte_16_hint(x: Field, y: Field) -> bool {\n    compute_lte(x, y, 16)\n}\n\n// Assert that (alo > blo && ahi >= bhi) || (alo <= blo && ahi > bhi)\nfn assert_gt_limbs(a: (Field, Field), b: (Field, Field)) {\n    let (alo, ahi) = a;\n    let (blo, bhi) = b;\n    unsafe {\n        let borrow = lte_16_hint(alo, blo);\n\n        let rlo = alo - blo - 1 + (borrow as Field) * TWO_POW_128;\n        let rhi = ahi - bhi - (borrow as Field);\n\n        rlo.assert_max_bit_size(128);\n        rhi.assert_max_bit_size(128);\n    }\n}\n\n/// Decompose a single field into two 16 byte fields.\npub fn decompose(x: Field) -> (Field, Field) {\n    if is_unconstrained() {\n        compute_decomposition(x)\n    } else {\n        unsafe {\n            // Take hints of the decomposition\n            let (xlo, xhi) = decompose_hint(x);\n\n            // Range check the limbs\n            xlo.assert_max_bit_size(128);\n            xhi.assert_max_bit_size(128);\n\n            // Check that the decomposition is correct\n            assert_eq(x, xlo + TWO_POW_128 * xhi);\n\n            // Assert that the decomposition of P is greater than the decomposition of x\n            assert_gt_limbs((PLO, PHI), (xlo, xhi));\n            (xlo, xhi)\n        }\n    }\n}\n\npub fn assert_gt(a: Field, b: Field) {\n    if is_unconstrained() {\n        assert(compute_lt(b, a, 32));\n    } else {\n        // Decompose a and b\n        let a_limbs = decompose(a);\n        let b_limbs = decompose(b);\n\n        // Assert that a_limbs is greater than b_limbs\n        assert_gt_limbs(a_limbs, b_limbs)\n    }\n}\n\npub fn assert_lt(a: Field, b: Field) {\n    assert_gt(b, a);\n}\n\npub fn gt(a: Field, b: Field) -> bool {\n    if is_unconstrained() {\n        compute_lt(b, a, 32)\n    } else if a == b {\n        false\n    } else {\n        // Take a hint of the comparison and verify it\n        unsafe {\n            if lt_32_hint(a, b) {\n                assert_gt(b, a);\n                false\n            } else {\n                assert_gt(a, b);\n                true\n            }\n        }\n    }\n}\n\npub fn lt(a: Field, b: Field) -> bool {\n    gt(b, a)\n}\n\nmod tests {\n    // TODO: Allow imports from \"super\"\n    use crate::field::bn254::{decompose, compute_lt, assert_gt, gt, TWO_POW_128, compute_lte, PLO, PHI};\n\n    #[test]\n    fn check_decompose() {\n        assert_eq(decompose(TWO_POW_128), (0, 1));\n        assert_eq(decompose(TWO_POW_128 + 0x1234567890), (0x1234567890, 1));\n        assert_eq(decompose(0x1234567890), (0x1234567890, 0));\n    }\n\n    #[test]\n    unconstrained fn check_decompose_unconstrained() {\n        assert_eq(decompose(TWO_POW_128), (0, 1));\n        assert_eq(decompose(TWO_POW_128 + 0x1234567890), (0x1234567890, 1));\n        assert_eq(decompose(0x1234567890), (0x1234567890, 0));\n    }\n\n    #[test]\n    fn check_compute_lt() {\n        assert(compute_lt(0, 1, 16));\n        assert(compute_lt(0, 0x100, 16));\n        assert(compute_lt(0x100, TWO_POW_128 - 1, 16));\n        assert(!compute_lt(0, TWO_POW_128, 16));\n    }\n\n    #[test]\n    fn check_compute_lte() {\n        assert(compute_lte(0, 1, 16));\n        assert(compute_lte(0, 0x100, 16));\n        assert(compute_lte(0x100, TWO_POW_128 - 1, 16));\n        assert(!compute_lte(0, TWO_POW_128, 16));\n\n        assert(compute_lte(0, 0, 16));\n        assert(compute_lte(0x100, 0x100, 16));\n        assert(compute_lte(TWO_POW_128 - 1, TWO_POW_128 - 1, 16));\n        assert(compute_lte(TWO_POW_128, TWO_POW_128, 16));\n    }\n\n    #[test]\n    fn check_assert_gt() {\n        assert_gt(1, 0);\n        assert_gt(0x100, 0);\n        assert_gt((0 - 1), (0 - 2));\n        assert_gt(TWO_POW_128, 0);\n        assert_gt(0 - 1, 0);\n    }\n\n    #[test]\n    unconstrained fn check_assert_gt_unconstrained() {\n        assert_gt(1, 0);\n        assert_gt(0x100, 0);\n        assert_gt((0 - 1), (0 - 2));\n        assert_gt(TWO_POW_128, 0);\n        assert_gt(0 - 1, 0);\n    }\n\n    #[test]\n    fn check_gt() {\n        assert(gt(1, 0));\n        assert(gt(0x100, 0));\n        assert(gt((0 - 1), (0 - 2)));\n        assert(gt(TWO_POW_128, 0));\n        assert(!gt(0, 0));\n        assert(!gt(0, 0x100));\n        assert(gt(0 - 1, 0 - 2));\n        assert(!gt(0 - 2, 0 - 1));\n    }\n\n    #[test]\n    unconstrained fn check_gt_unconstrained() {\n        assert(gt(1, 0));\n        assert(gt(0x100, 0));\n        assert(gt((0 - 1), (0 - 2)));\n        assert(gt(TWO_POW_128, 0));\n        assert(!gt(0, 0));\n        assert(!gt(0, 0x100));\n        assert(gt(0 - 1, 0 - 2));\n        assert(!gt(0 - 2, 0 - 1));\n    }\n\n    #[test]\n    fn check_plo_phi() {\n        assert_eq(PLO + PHI * TWO_POW_128, 0);\n        let p_bytes = crate::field::modulus_le_bytes();\n        let mut p_low: Field = 0;\n        let mut p_high: Field = 0;\n\n        let mut offset = 1;\n        for i in 0..16 {\n            p_low += (p_bytes[i] as Field) * offset;\n            p_high += (p_bytes[i + 16] as Field) * offset;\n            offset *= 256;\n        }\n        assert_eq(p_low, PLO);\n        assert_eq(p_high, PHI);\n    }\n}\n"},"26":{"path":"std/field/mod.nr","source":"mod bn254;\nuse bn254::lt as bn254_lt;\n\nimpl Field {\n    /// Asserts that `self` can be represented in `bit_size` bits.\n    ///\n    /// # Failures\n    /// Causes a constraint failure for `Field` values exceeding `2^{bit_size}`.\n    // docs:start:assert_max_bit_size\n    pub fn assert_max_bit_size(self, bit_size: u32) {\n        // docs:end:assert_max_bit_size\n        crate::assert_constant(bit_size);\n        assert(bit_size < modulus_num_bits() as u32);\n        self.__assert_max_bit_size(bit_size);\n    }\n\n    #[builtin(apply_range_constraint)]\n    fn __assert_max_bit_size(self, bit_size: u32) {}\n\n    /// Decomposes `self` into its little endian bit decomposition as a `[u1; N]` array.\n    /// This slice will be zero padded should not all bits be necessary to represent `self`.\n    /// \n    /// # Failures\n    /// Causes a constraint failure for `Field` values exceeding `2^N` as the resulting slice will not\n    /// be able to represent the original `Field`.\n    ///\n    /// # Safety\n    /// Values of `N` equal to or greater than the number of bits necessary to represent the `Field` modulus\n    /// (e.g. 254 for the BN254 field) allow for multiple bit decompositions. This is due to how the `Field` will\n    /// wrap around due to overflow when verifying the decomposition.\n    #[builtin(to_le_bits)]\n    // docs:start:to_le_bits\n    pub fn to_le_bits<let N: u32>(self: Self) -> [u1; N] {}\n    // docs:end:to_le_bits\n\n    /// Decomposes `self` into its big endian bit decomposition as a `[u1; N]` array.\n    /// This array will be zero padded should not all bits be necessary to represent `self`.\n    /// \n    /// # Failures\n    /// Causes a constraint failure for `Field` values exceeding `2^N` as the resulting slice will not\n    /// be able to represent the original `Field`.\n    ///\n    /// # Safety\n    /// Values of `N` equal to or greater than the number of bits necessary to represent the `Field` modulus\n    /// (e.g. 254 for the BN254 field) allow for multiple bit decompositions. This is due to how the `Field` will\n    /// wrap around due to overflow when verifying the decomposition.\n    #[builtin(to_be_bits)]\n     // docs:start:to_be_bits\n    pub fn to_be_bits<let N: u32>(self: Self) -> [u1; N] {}\n    // docs:end:to_be_bits\n\n    /// Decomposes `self` into its little endian byte decomposition as a `[u8]` slice of length `byte_size`.\n    /// This slice will be zero padded should not all bytes be necessary to represent `self`.\n    /// \n    /// # Failures\n    /// Causes a constraint failure for `Field` values exceeding `2^{8*byte_size}` as the resulting slice will not\n    /// be able to represent the original `Field`.\n    ///\n    /// # Safety\n    /// Values of `byte_size` equal to or greater than the number of bytes necessary to represent the `Field` modulus\n    /// (e.g. 32 for the BN254 field) allow for multiple byte decompositions. This is due to how the `Field` will\n    /// wrap around due to overflow when verifying the decomposition.\n    // docs:start:to_le_bytes\n    pub fn to_le_bytes<let N: u32>(self: Self) -> [u8; N] {\n        self.to_le_radix(256)\n    }\n    // docs:end:to_le_bytes\n\n    /// Decomposes `self` into its big endian byte decomposition as a `[u8]` slice of length `byte_size`.\n    /// This slice will be zero padded should not all bytes be necessary to represent `self`.\n    /// \n    /// # Failures\n    /// Causes a constraint failure for `Field` values exceeding `2^{8*byte_size}` as the resulting slice will not\n    /// be able to represent the original `Field`.\n    ///\n    /// # Safety\n    /// Values of `byte_size` equal to or greater than the number of bytes necessary to represent the `Field` modulus\n    /// (e.g. 32 for the BN254 field) allow for multiple byte decompositions. This is due to how the `Field` will\n    /// wrap around due to overflow when verifying the decomposition.\n    // docs:start:to_be_bytes\n    pub fn to_be_bytes<let N: u32>(self: Self) -> [u8; N] {\n        self.to_be_radix(256)\n    }\n    // docs:end:to_be_bytes\n\n    // docs:start:to_le_radix\n    pub fn to_le_radix<let N: u32>(self: Self, radix: u32) -> [u8; N] {\n        crate::assert_constant(radix);\n        self.__to_le_radix(radix)\n    }\n    // docs:end:to_le_radix\n\n    // docs:start:to_be_radix\n    pub fn to_be_radix<let N: u32>(self: Self, radix: u32) -> [u8; N] {\n        crate::assert_constant(radix);\n        self.__to_be_radix(radix)\n    }\n    // docs:end:to_be_radix\n\n    // `_radix` must be less than 256\n    #[builtin(to_le_radix)]\n    fn __to_le_radix<let N: u32>(self, radix: u32) -> [u8; N] {}\n\n    #[builtin(to_be_radix)]\n    fn __to_be_radix<let N: u32>(self, radix: u32) -> [u8; N] {}\n\n    // Returns self to the power of the given exponent value.\n    // Caution: we assume the exponent fits into 32 bits\n    // using a bigger bit size impacts negatively the performance and should be done only if the exponent does not fit in 32 bits\n    pub fn pow_32(self, exponent: Field) -> Field {\n        let mut r: Field = 1;\n        let b: [u1; 32] = exponent.to_le_bits();\n\n        for i in 1..33 {\n            r *= r;\n            r = (b[32-i] as Field) * (r * self) + (1 - b[32-i] as Field) * r;\n        }\n        r\n    }\n\n    // Parity of (prime) Field element, i.e. sgn0(x mod p) = 0 if x `elem` {0, ..., p-1} is even, otherwise sgn0(x mod p) = 1.\n    pub fn sgn0(self) -> u1 {\n        self as u1\n    }\n\n    pub fn lt(self, another: Field) -> bool {\n        if crate::compat::is_bn254() {\n            bn254_lt(self, another)\n        } else {\n            lt_fallback(self, another)\n        }\n    }\n}\n\n#[builtin(modulus_num_bits)]\npub comptime fn modulus_num_bits() -> u64 {}\n\n#[builtin(modulus_be_bits)]\npub comptime fn modulus_be_bits() -> [u1] {}\n\n#[builtin(modulus_le_bits)]\npub comptime fn modulus_le_bits() -> [u1] {}\n\n#[builtin(modulus_be_bytes)]\npub comptime fn modulus_be_bytes() -> [u8] {}\n\n#[builtin(modulus_le_bytes)]\npub comptime fn modulus_le_bytes() -> [u8] {}\n\n// Convert a 32 byte array to a field element by modding\npub fn bytes32_to_field(bytes32: [u8; 32]) -> Field {\n    // Convert it to a field element\n    let mut v = 1;\n    let mut high = 0 as Field;\n    let mut low = 0 as Field;\n\n    for i in 0..16 {\n        high = high + (bytes32[15 - i] as Field) * v;\n        low = low + (bytes32[16 + 15 - i] as Field) * v;\n        v = v * 256;\n    }\n    // Abuse that a % p + b % p = (a + b) % p and that low < p\n    low + high * v\n}\n\nfn lt_fallback(x: Field, y: Field) -> bool {\n    let x_bytes: [u8; 32] = x.to_le_bytes();\n    let y_bytes: [u8; 32] = y.to_le_bytes();\n    let mut x_is_lt = false;\n    let mut done = false;\n    for i in 0..32 {\n        if (!done) {\n            let x_byte = x_bytes[32 - 1 - i] as u8;\n            let y_byte = y_bytes[32 - 1 - i] as u8;\n            let bytes_match = x_byte == y_byte;\n            if !bytes_match {\n                x_is_lt = x_byte < y_byte;\n                done = true;\n            }\n        }\n    }\n    x_is_lt\n}\n\nmod tests {\n    #[test]\n    // docs:start:to_be_bits_example\n    fn test_to_be_bits() {\n        let field = 2;\n        let bits: [u1; 8] = field.to_be_bits();\n        assert_eq(bits, [0, 0, 0, 0, 0, 0, 1, 0]);\n    }\n    // docs:end:to_be_bits_example\n\n    #[test]\n    // docs:start:to_le_bits_example\n    fn test_to_le_bits() {\n        let field = 2;\n        let bits: [u1; 8] = field.to_le_bits();\n        assert_eq(bits, [0, 1, 0, 0, 0, 0, 0, 0]);\n    }\n    // docs:end:to_le_bits_example\n\n    #[test]\n    // docs:start:to_be_bytes_example\n    fn test_to_be_bytes() {\n        let field = 2;\n        let bits: [u8; 8] = field.to_be_bytes();\n        assert_eq(bits, [0, 0, 0, 0, 0, 0, 0, 2]);\n    }\n    // docs:end:to_be_bytes_example\n\n    #[test]\n    // docs:start:to_le_bytes_example\n    fn test_to_le_bytes() {\n        let field = 2;\n        let bits: [u8; 8] = field.to_le_bytes();\n        assert_eq(bits, [2, 0, 0, 0, 0, 0, 0, 0]);\n    }\n    // docs:end:to_le_bytes_example\n\n    #[test]\n    // docs:start:to_be_radix_example\n    fn test_to_be_radix() {\n        let field = 2;\n        let bits: [u8; 8] = field.to_be_radix(256);\n        assert_eq(bits, [0, 0, 0, 0, 0, 0, 0, 2]);\n    }\n    // docs:end:to_be_radix_example\n\n    #[test]\n    // docs:start:to_le_radix_example\n    fn test_to_le_radix() {\n        let field = 2;\n        let bits: [u8; 8] = field.to_le_radix(256);\n        assert_eq(bits, [2, 0, 0, 0, 0, 0, 0, 0]);\n    }\n    // docs:end:to_le_radix_example\n}\n"},"29":{"path":"std/hash/mod.nr","source":"mod poseidon;\nmod mimc;\nmod poseidon2;\nmod keccak;\nmod sha256;\nmod sha512;\n\nuse crate::default::Default;\nuse crate::uint128::U128;\nuse crate::collections::vec::Vec;\nuse crate::embedded_curve_ops::{EmbeddedCurvePoint, EmbeddedCurveScalar, multi_scalar_mul, multi_scalar_mul_slice};\nuse crate::meta::derive_via;\n\n// Kept for backwards compatibility\npub use sha256::{digest, sha256, sha256_compression, sha256_var};\n\n#[foreign(blake2s)]\n// docs:start:blake2s\npub fn blake2s<let N: u32>(input: [u8; N]) -> [u8; 32]\n// docs:end:blake2s\n{}\n\n#[foreign(blake3)]\n// docs:start:blake3\npub fn blake3<let N: u32>(input: [u8; N]) -> [u8; 32]\n// docs:end:blake3\n{}\n\n// docs:start:pedersen_commitment\npub fn pedersen_commitment<let N: u32>(input: [Field; N]) -> EmbeddedCurvePoint {\n    // docs:end:pedersen_commitment\n    pedersen_commitment_with_separator(input, 0)\n}\n\npub fn pedersen_hash_with_separator<let N: u32>(input: [Field; N], separator: u32) -> Field {\n    __pedersen_hash_with_separator(input, separator)\n}\n\nfn pedersen_commitment_with_separator<let N: u32>(input: [Field; N], separator: u32) -> EmbeddedCurvePoint {\n    let value = __pedersen_commitment_with_separator(input, separator);\n    if (value[0] == 0) & (value[1] == 0) {\n        EmbeddedCurvePoint { x: 0, y: 0, is_infinite: true }\n    } else {\n        EmbeddedCurvePoint { x: value[0], y: value[1], is_infinite: false }\n    }\n}\n\n#[no_predicates]\nfn pedersen_commitment_with_separator_noir<let N: u32>(input: [Field; N], separator: u32) -> EmbeddedCurvePoint {\n    let mut points = [EmbeddedCurveScalar { lo: 0, hi: 0 }; N];\n    for i in 0..N {\n        // we use the unsafe version because the multi_scalar_mul will constrain the scalars.\n        points[i] = from_field_unsafe(input[i]);\n    }\n    let generators = derive_generators(\"DEFAULT_DOMAIN_SEPARATOR\".as_bytes(), separator);\n    multi_scalar_mul(generators, points)\n}\n\n#[no_predicates]\nfn pedersen_hash_with_separator_noir<let N: u32>(input: [Field; N], separator: u32) -> Field {\n    let mut scalars: Vec<EmbeddedCurveScalar> = Vec::from_slice([EmbeddedCurveScalar { lo: 0, hi: 0 }; N].as_slice()); //Vec::new();\n\n    for i in 0..N {\n        scalars.set(i, from_field_unsafe(input[i]));\n    }\n    scalars.push(EmbeddedCurveScalar { lo: N as Field, hi: 0 as Field });\n    let domain_generators :[EmbeddedCurvePoint; N]= derive_generators(\"DEFAULT_DOMAIN_SEPARATOR\".as_bytes(), separator);\n    let mut vec_generators = Vec::new();\n    for i in 0..N {\n        vec_generators.push(domain_generators[i]);\n    }\n    let length_generator : [EmbeddedCurvePoint; 1] = derive_generators(\"pedersen_hash_length\".as_bytes(), 0);\n    vec_generators.push(length_generator[0]);\n    multi_scalar_mul_slice(vec_generators.slice, scalars.slice)[0]\n}\n\n// docs:start:pedersen_hash\npub fn pedersen_hash<let N: u32>(input: [Field; N]) -> Field\n// docs:end:pedersen_hash\n{\n    __pedersen_hash_with_separator(input, 0)\n}\n\n#[foreign(pedersen_hash)]\nfn __pedersen_hash_with_separator<let N: u32>(input: [Field; N], separator: u32) -> Field {}\n\n#[foreign(pedersen_commitment)]\nfn __pedersen_commitment_with_separator<let N: u32>(input: [Field; N], separator: u32) -> [Field; 2] {}\n\n#[field(bn254)]\nfn derive_generators<let N: u32, let M: u32>(domain_separator_bytes: [u8; M], starting_index: u32) -> [EmbeddedCurvePoint; N] {\n    crate::assert_constant(domain_separator_bytes);\n    // TODO(https://github.com/noir-lang/noir/issues/5672): Add back assert_constant on starting_index\n    __derive_generators(domain_separator_bytes, starting_index)\n}\n\n#[builtin(derive_pedersen_generators)]\n#[field(bn254)]\nfn __derive_generators<let N: u32, let M: u32>(\n    domain_separator_bytes: [u8; M],\n    starting_index: u32\n) -> [EmbeddedCurvePoint; N] {}\n\n#[field(bn254)]\n    // Same as from_field but:\n    // does not assert the limbs are 128 bits\n    // does not assert the decomposition does not overflow the EmbeddedCurveScalar\n    fn from_field_unsafe(scalar: Field) -> EmbeddedCurveScalar {\n    let (xlo, xhi) = unsafe {\n        crate::field::bn254::decompose_hint(scalar)\n    };\n    // Check that the decomposition is correct\n    assert_eq(scalar, xlo + crate::field::bn254::TWO_POW_128 * xhi);\n    EmbeddedCurveScalar { lo: xlo, hi: xhi }\n}\n\npub fn hash_to_field(inputs: [Field]) -> Field {\n    let mut sum = 0;\n\n    for input in inputs {\n        let input_bytes: [u8; 32] = input.to_le_bytes();\n        sum += crate::field::bytes32_to_field(blake2s(input_bytes));\n    }\n\n    sum\n}\n\n// docs:start:keccak256\npub fn keccak256<let N: u32>(input: [u8; N], message_size: u32) -> [u8; 32]\n// docs:end:keccak256\n{\n    crate::hash::keccak::keccak256(input, message_size)\n}\n\n#[foreign(poseidon2_permutation)]\npub fn poseidon2_permutation<let N: u32>(_input: [Field; N], _state_length: u32) -> [Field; N] {}\n\n// Generic hashing support.\n// Partially ported and impacted by rust.\n\n// Hash trait shall be implemented per type.\n#[derive_via(derive_hash)]\npub trait Hash {\n    fn hash<H>(self, state: &mut H) where H: Hasher;\n}\n\n// docs:start:derive_hash\ncomptime fn derive_hash(s: StructDefinition) -> Quoted {\n    let name = quote { Hash };\n    let signature = quote { fn hash<H>(_self: Self, _state: &mut H) where H: std::hash::Hasher };\n    let for_each_field = |name| quote { _self.$name.hash(_state); };\n    crate::meta::make_trait_impl(s, name, signature, for_each_field, quote {}, |fields| fields)\n}\n// docs:end:derive_hash\n\n// Hasher trait shall be implemented by algorithms to provide hash-agnostic means.\n// TODO: consider making the types generic here ([u8], [Field], etc.)\npub trait Hasher {\n    fn finish(self) -> Field;\n\n    fn write(&mut self, input: Field);\n}\n\n// BuildHasher is a factory trait, responsible for production of specific Hasher.\npub trait BuildHasher<H> where H: Hasher {\n    fn build_hasher(self) -> H;\n}\n\npub struct BuildHasherDefault<H>;\n\nimpl<H> BuildHasher<H> for BuildHasherDefault<H>\nwhere\n    H: Hasher + Default {\n    fn build_hasher(_self: Self) -> H {\n        H::default()\n    }\n}\n\nimpl<H> Default for BuildHasherDefault<H>\nwhere\n    H: Hasher + Default {\n    fn default() -> Self {\n        BuildHasherDefault {}\n    }\n}\n\nimpl Hash for Field {\n    fn hash<H>(self, state: &mut H) where H: Hasher {\n        H::write(state, self);\n    }\n}\n\nimpl Hash for u1 {\n    fn hash<H>(self, state: &mut H) where H: Hasher {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for u8 {\n    fn hash<H>(self, state: &mut H) where H: Hasher {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for u16 {\n    fn hash<H>(self, state: &mut H) where H: Hasher {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for u32 {\n    fn hash<H>(self, state: &mut H) where H: Hasher {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for u64 {\n    fn hash<H>(self, state: &mut H) where H: Hasher {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for i8 {\n    fn hash<H>(self, state: &mut H) where H: Hasher {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for i16 {\n    fn hash<H>(self, state: &mut H) where H: Hasher {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for i32 {\n    fn hash<H>(self, state: &mut H) where H: Hasher {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for i64 {\n    fn hash<H>(self, state: &mut H) where H: Hasher {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for bool {\n    fn hash<H>(self, state: &mut H) where H: Hasher {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for () {\n    fn hash<H>(_self: Self, _state: &mut H) where H: Hasher {}\n}\n\nimpl Hash for U128 {\n    fn hash<H>(self, state: &mut H) where H: Hasher {\n        H::write(state, self.lo as Field);\n        H::write(state, self.hi as Field);\n    }\n}\n\nimpl<T, let N: u32> Hash for [T; N] where T: Hash {\n    fn hash<H>(self, state: &mut H) where H: Hasher {\n        for elem in self {\n            elem.hash(state);\n        }\n    }\n}\n\nimpl<T> Hash for [T] where T: Hash {\n    fn hash<H>(self, state: &mut H) where H: Hasher {\n        self.len().hash(state);\n        for elem in self {\n            elem.hash(state);\n        }\n    }\n}\n\nimpl<A, B> Hash for (A, B) where A: Hash, B: Hash {\n    fn hash<H>(self, state: &mut H) where H: Hasher {\n        self.0.hash(state);\n        self.1.hash(state);\n    }\n}\n\nimpl<A, B, C> Hash for (A, B, C) where A: Hash, B: Hash, C: Hash {\n    fn hash<H>(self, state: &mut H) where H: Hasher {\n        self.0.hash(state);\n        self.1.hash(state);\n        self.2.hash(state);\n    }\n}\n\nimpl<A, B, C, D> Hash for (A, B, C, D) where A: Hash, B: Hash, C: Hash, D: Hash {\n    fn hash<H>(self, state: &mut H) where H: Hasher {\n        self.0.hash(state);\n        self.1.hash(state);\n        self.2.hash(state);\n        self.3.hash(state);\n    }\n}\n\nimpl<A, B, C, D, E> Hash for (A, B, C, D, E) where A: Hash, B: Hash, C: Hash, D: Hash, E: Hash {\n    fn hash<H>(self, state: &mut H) where H: Hasher {\n        self.0.hash(state);\n        self.1.hash(state);\n        self.2.hash(state);\n        self.3.hash(state);\n        self.4.hash(state);\n    }\n}\n\n// Some test vectors for Pedersen hash and Pedersen Commitment.\n// They have been generated using the same functions so the tests are for now useless\n// but they will be useful when we switch to Noir implementation.\n#[test]\nfn assert_pedersen() {\n    assert_eq(\n        pedersen_hash_with_separator([1], 1), 0x1b3f4b1a83092a13d8d1a59f7acb62aba15e7002f4440f2275edb99ebbc2305f\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1], 1), EmbeddedCurvePoint {\n        x: 0x054aa86a73cb8a34525e5bbed6e43ba1198e860f5f3950268f71df4591bde402,\n        y: 0x209dcfbf2cfb57f9f6046f44d71ac6faf87254afc7407c04eb621a6287cac126,\n        is_infinite: false\n    }\n    );\n\n    assert_eq(\n        pedersen_hash_with_separator([1, 2], 2), 0x26691c129448e9ace0c66d11f0a16d9014a9e8498ee78f4d69f0083168188255\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2], 2), EmbeddedCurvePoint {\n        x: 0x2e2b3b191e49541fe468ec6877721d445dcaffe41728df0a0eafeb15e87b0753,\n        y: 0x2ff4482400ad3a6228be17a2af33e2bcdf41be04795f9782bd96efe7e24f8778,\n        is_infinite: false\n    }\n    );\n    assert_eq(\n        pedersen_hash_with_separator([1, 2, 3], 3), 0x0bc694b7a1f8d10d2d8987d07433f26bd616a2d351bc79a3c540d85b6206dbe4\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2, 3], 3), EmbeddedCurvePoint {\n        x: 0x1fee4e8cf8d2f527caa2684236b07c4b1bad7342c01b0f75e9a877a71827dc85,\n        y: 0x2f9fedb9a090697ab69bf04c8bc15f7385b3e4b68c849c1536e5ae15ff138fd1,\n        is_infinite: false\n    }\n    );\n    assert_eq(\n        pedersen_hash_with_separator([1, 2, 3, 4], 4), 0xdae10fb32a8408521803905981a2b300d6a35e40e798743e9322b223a5eddc\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2, 3, 4], 4), EmbeddedCurvePoint {\n        x: 0x07ae3e202811e1fca39c2d81eabe6f79183978e6f12be0d3b8eda095b79bdbc9,\n        y: 0x0afc6f892593db6fbba60f2da558517e279e0ae04f95758587760ba193145014,\n        is_infinite: false\n    }\n    );\n    assert_eq(\n        pedersen_hash_with_separator([1, 2, 3, 4, 5], 5), 0xfc375b062c4f4f0150f7100dfb8d9b72a6d28582dd9512390b0497cdad9c22\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2, 3, 4, 5], 5), EmbeddedCurvePoint {\n        x: 0x1754b12bd475a6984a1094b5109eeca9838f4f81ac89c5f0a41dbce53189bb29,\n        y: 0x2da030e3cfcdc7ddad80eaf2599df6692cae0717d4e9f7bfbee8d073d5d278f7,\n        is_infinite: false\n    }\n    );\n    assert_eq(\n        pedersen_hash_with_separator([1, 2, 3, 4, 5, 6], 6), 0x1696ed13dc2730062a98ac9d8f9de0661bb98829c7582f699d0273b18c86a572\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2, 3, 4, 5, 6], 6), EmbeddedCurvePoint {\n        x: 0x190f6c0e97ad83e1e28da22a98aae156da083c5a4100e929b77e750d3106a697,\n        y: 0x1f4b60f34ef91221a0b49756fa0705da93311a61af73d37a0c458877706616fb,\n        is_infinite: false\n    }\n    );\n    assert_eq(\n        pedersen_hash_with_separator([1, 2, 3, 4, 5, 6, 7], 7), 0x128c0ff144fc66b6cb60eeac8a38e23da52992fc427b92397a7dffd71c45ede3\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2, 3, 4, 5, 6, 7], 7), EmbeddedCurvePoint {\n        x: 0x015441e9d29491b06563fac16fc76abf7a9534c715421d0de85d20dbe2965939,\n        y: 0x1d2575b0276f4e9087e6e07c2cb75aa1baafad127af4be5918ef8a2ef2fea8fc,\n        is_infinite: false\n    }\n    );\n    assert_eq(\n        pedersen_hash_with_separator([1, 2, 3, 4, 5, 6, 7, 8], 8), 0x2f960e117482044dfc99d12fece2ef6862fba9242be4846c7c9a3e854325a55c\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2, 3, 4, 5, 6, 7, 8], 8), EmbeddedCurvePoint {\n        x: 0x1657737676968887fceb6dd516382ea13b3a2c557f509811cd86d5d1199bc443,\n        y: 0x1f39f0cb569040105fa1e2f156521e8b8e08261e635a2b210bdc94e8d6d65f77,\n        is_infinite: false\n    }\n    );\n    assert_eq(\n        pedersen_hash_with_separator([1, 2, 3, 4, 5, 6, 7, 8, 9], 9), 0x0c96db0790602dcb166cc4699e2d306c479a76926b81c2cb2aaa92d249ec7be7\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2, 3, 4, 5, 6, 7, 8, 9], 9), EmbeddedCurvePoint {\n        x: 0x0a3ceae42d14914a432aa60ec7fded4af7dad7dd4acdbf2908452675ec67e06d,\n        y: 0xfc19761eaaf621ad4aec9a8b2e84a4eceffdba78f60f8b9391b0bd9345a2f2,\n        is_infinite: false\n    }\n    );\n    assert_eq(\n        pedersen_hash_with_separator([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 10), 0x2cd37505871bc460a62ea1e63c7fe51149df5d0801302cf1cbc48beb8dff7e94\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 10), EmbeddedCurvePoint {\n        x: 0x2fb3f8b3d41ddde007c8c3c62550f9a9380ee546fcc639ffbb3fd30c8d8de30c,\n        y: 0x300783be23c446b11a4c0fabf6c91af148937cea15fcf5fb054abf7f752ee245,\n        is_infinite: false\n    }\n    );\n}\n\n"},"300":{"path":"/Users/rafi/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.56.0/noir-projects/noir-protocol-circuits/crates/types/src/utils/mod.nr","source":"// general util packages/modules are usually bad practice\n// because there is no criteria for what we should not put in here.\n// Reducing the size of this package would be welcome.\n\nmod arrays;\nmod field;\nmod reader;\nmod uint256;\n\n// if predicate == true then return lhs, else return rhs\npub fn conditional_assign(predicate: bool, lhs: Field, rhs: Field) -> Field {\n    if predicate { lhs } else { rhs }\n}\n\npub fn arr_copy_slice<T, let N: u32, let M: u32>(src: [T; N], mut dst: [T; M], offset: u32) -> [T; M] {\n    let iterator_len = if N > M { M } else { N };\n    for i in 0..iterator_len {\n        dst[i] = src[i + offset];\n    }\n    dst\n}\n"},"301":{"path":"/Users/rafi/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.56.0/noir-projects/noir-protocol-circuits/crates/types/src/storage/map.nr","source":"use crate::{hash::pedersen_hash, traits::ToField};\n\npub fn derive_storage_slot_in_map<K>(storage_slot: Field, key: K) -> Field where K: ToField {\n    pedersen_hash([storage_slot, key.to_field()], 0)\n}\n\nmod test {\n    use crate::{address::AztecAddress, storage::map::derive_storage_slot_in_map};\n\n    #[test]\n    fn test_derive_storage_slot_in_map_matches_typescript() {\n        let map_slot = 0x132258fb6962c4387ba659d9556521102d227549a386d39f0b22d1890d59c2b5;\n        let key = AztecAddress::from_field(0x302dbc2f9b50a73283d5fb2f35bc01eae8935615817a0b4219a057b2ba8a5a3f);\n\n        let slot = derive_storage_slot_in_map(map_slot, key);\n\n        // The following value was generated by `map_slot.test.ts`\n        let slot_from_typescript = 0x2499880e2b1b831785c17286f99a0d5122fee784ce7b1c04e380c4a991da819a;\n\n        assert_eq(slot, slot_from_typescript);\n    }\n}\n"},"303":{"path":"/Users/rafi/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.56.0/noir-projects/noir-protocol-circuits/crates/types/src/traits.nr","source":"use crate::utils::field::field_from_bytes;\nuse crate::meta::{derive_deserialize, derive_serialize};\n\n// Trait: is_empty\n//\n// The general is_empty trait checks if a data type is is empty,\n// and it defines empty for the basic data types as 0.\n//\n// If a Field is equal to zero, then it is regarded as zero.\n// We will go with this definition for now, however it can be problematic\n// if a value can actually be zero. In a future refactor, we can\n// use the optional type for safety. Doing it now would lead to a worse devex\n// and would make it harder to sync up with the cpp code.\n// Preferred over Default trait to convey intent, as default doesn't necessarily mean empty.\npub trait Empty {\n    fn empty() -> Self;\n}\n\nimpl Empty for Field {\n    fn empty() -> Self {\n        0\n    }\n}\n\nimpl Empty for u1 {\n    fn empty() -> Self {\n        0\n    }\n}\nimpl Empty for u8 {\n    fn empty() -> Self {\n        0\n    }\n}\nimpl Empty for u32 {\n    fn empty() -> Self {\n        0\n    }\n}\nimpl Empty for u64 {\n    fn empty() -> Self {\n        0\n    }\n}\nimpl Empty for U128 {\n    fn empty() -> Self {\n        U128::from_integer(0)\n    }\n}\n\npub fn is_empty<T>(item: T) -> bool where T: Empty + Eq {\n    item.eq(T::empty())\n}\n\npub fn is_empty_array<T, let N: u32>(array: [T; N]) -> bool where T: Empty + Eq {\n    array.all(|elem| is_empty(elem))\n}\n\npub trait Hash {\n    fn hash(self) -> Field;\n}\n\npub trait ToField {\n    fn to_field(self) -> Field;\n}\n\nimpl ToField for Field {\n    fn to_field(self) -> Field {\n        self\n    }\n}\n\nimpl ToField for bool {\n    fn to_field(self) -> Field {\n        self as Field\n    }\n}\nimpl ToField for u1 {\n    fn to_field(self) -> Field {\n        self as Field\n    }\n}\nimpl ToField for u8 {\n    fn to_field(self) -> Field {\n        self as Field\n    }\n}\nimpl ToField for u32 {\n    fn to_field(self) -> Field {\n        self as Field\n    }\n}\nimpl ToField for u64 {\n    fn to_field(self) -> Field {\n        self as Field\n    }\n}\nimpl ToField for U128 {\n    fn to_field(self) -> Field {\n        self.to_integer()\n    }\n}\nimpl<let N: u32> ToField for str<N> {\n    fn to_field(self) -> Field {\n        assert(N < 32, \"String doesn't fit in a field, consider using Serialize instead\");\n        field_from_bytes(self.as_bytes(), true)\n    }\n}\n\npub trait FromField {\n    fn from_field(value: Field) -> Self;\n}\n\nimpl FromField for Field {\n    fn from_field(value: Field) -> Self {\n        value\n    }\n}\n\nimpl FromField for bool {\n    fn from_field(value: Field) -> Self {\n        value as bool\n    }\n}\nimpl FromField for u1 {\n    fn from_field(value: Field) -> Self {\n        value as u1\n    }\n}\nimpl FromField for u8 {\n    fn from_field(value: Field) -> Self {\n        value as u8\n    }\n}\nimpl FromField for u32 {\n    fn from_field(value: Field) -> Self {\n        value as u32\n    }\n}\nimpl FromField for u64 {\n    fn from_field(value: Field) -> Self {\n        value as u64\n    }\n}\nimpl FromField for U128 {\n    fn from_field(value: Field) -> Self {\n        U128::from_integer(value)\n    }\n}\n\n// docs:start:serialize\n#[derive_via(derive_serialize)]\npub trait Serialize<let N: u32> {\n    fn serialize(self) -> [Field; N];\n}\n// docs:end:serialize\n\nimpl<let N: u32> Serialize<N> for [Field; N] {\n    fn serialize(self) -> [Field; N] {\n        self\n    }\n}\n\nimpl<let N: u32> Serialize<N> for str<N> {\n    fn serialize(self) -> [Field; N] {\n        let bytes = self.as_bytes();\n        let mut fields = [0; N];\n        for i in 0..bytes.len() {\n            fields[i] = bytes[i] as Field;\n        }\n        fields\n    }\n}\n\n// docs:start:deserialize\n#[derive_via(derive_deserialize)]\npub trait Deserialize<let N: u32> {\n    fn deserialize(fields: [Field; N]) -> Self;\n}\n// docs:end:deserialize\n\nimpl<let N: u32> Deserialize<N> for [Field; N] {\n    fn deserialize(fields: [Field; N]) -> Self {\n        fields\n    }\n}\n"},"307":{"path":"/Users/rafi/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.56.0/noir-projects/noir-protocol-circuits/crates/types/src/contract_instance.nr","source":"use crate::{\n    address::{aztec_address::AztecAddress, partial_address::PartialAddress, public_keys_hash::PublicKeysHash},\n    contract_class_id::ContractClassId, constants::CONTRACT_INSTANCE_LENGTH,\n    traits::{Deserialize, Hash, Serialize}\n};\n\npub struct ContractInstance {\n    salt : Field,\n    deployer: AztecAddress,\n    contract_class_id : ContractClassId,\n    initialization_hash : Field,\n    public_keys_hash : PublicKeysHash,\n}\n\nimpl Eq for ContractInstance {\n    fn eq(self, other: Self) -> bool {\n        self.public_keys_hash.eq(other.public_keys_hash)\n            & self.initialization_hash.eq(other.initialization_hash)\n            & self.contract_class_id.eq(other.contract_class_id)\n            & self.salt.eq(other.salt)\n    }\n}\n\nimpl Serialize<CONTRACT_INSTANCE_LENGTH> for ContractInstance {\n    fn serialize(self) -> [Field; CONTRACT_INSTANCE_LENGTH] {\n        [\n            self.salt,\n            self.deployer.to_field(),\n            self.contract_class_id.to_field(),\n            self.initialization_hash,\n            self.public_keys_hash.to_field()\n        ]\n    }\n}\n\nimpl Deserialize<CONTRACT_INSTANCE_LENGTH> for ContractInstance {\n    fn deserialize(serialized: [Field; CONTRACT_INSTANCE_LENGTH]) -> Self {\n        Self {\n            salt: serialized[0],\n            deployer: AztecAddress::from_field(serialized[1]),\n            contract_class_id: ContractClassId::from_field(serialized[2]),\n            initialization_hash: serialized[3],\n            public_keys_hash: PublicKeysHash::from_field(serialized[4])\n        }\n    }\n}\n\nimpl Hash for ContractInstance {\n    fn hash(self) -> Field {\n        self.to_address().to_field()\n    }\n}\n\nimpl ContractInstance {\n    fn to_address(self) -> AztecAddress {\n        AztecAddress::compute(\n            self.public_keys_hash,\n            PartialAddress::compute(\n                self.contract_class_id,\n                self.salt,\n                self.initialization_hash,\n                self.deployer\n            )\n        )\n    }\n}\n"},"308":{"path":"/Users/rafi/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.56.0/noir-projects/noir-protocol-circuits/crates/types/src/address/aztec_address.nr","source":"use crate::{\n    crate::address::{partial_address::PartialAddress, public_keys_hash::PublicKeysHash},\n    constants::{AZTEC_ADDRESS_LENGTH, GENERATOR_INDEX__CONTRACT_ADDRESS_V1},\n    hash::poseidon2_hash_with_separator, traits::{Empty, FromField, ToField, Serialize, Deserialize},\n    utils\n};\n\n// Aztec address\npub struct AztecAddress {\n    inner : Field\n}\n\nimpl Eq for AztecAddress {\n    fn eq(self, other: Self) -> bool {\n        self.to_field() == other.to_field()\n    }\n}\n\nimpl Empty for AztecAddress {\n    fn empty() -> Self {\n        Self { inner: 0 }\n    }\n}\n\nimpl ToField for AztecAddress {\n    fn to_field(self) -> Field {\n        self.inner\n    }\n}\n\nimpl FromField for AztecAddress {\n    fn from_field(value: Field) -> AztecAddress {\n        AztecAddress { inner: value }\n    }\n}\n\nimpl Serialize<AZTEC_ADDRESS_LENGTH> for AztecAddress {\n    fn serialize(self: Self) -> [Field; AZTEC_ADDRESS_LENGTH] {\n        [self.to_field()]\n    }\n}\n\nimpl Deserialize<AZTEC_ADDRESS_LENGTH> for AztecAddress {\n    fn deserialize(fields: [Field; AZTEC_ADDRESS_LENGTH]) -> Self {\n        FromField::from_field(fields[0])\n    }\n}\n\nimpl AztecAddress {\n    pub fn zero() -> Self {\n        Self { inner: 0 }\n    }\n\n    pub fn compute(pub_keys_hash: PublicKeysHash, partial_address: PartialAddress) -> AztecAddress {\n        AztecAddress::from_field(\n            poseidon2_hash_with_separator(\n                [pub_keys_hash.to_field(), partial_address.to_field()],\n                GENERATOR_INDEX__CONTRACT_ADDRESS_V1\n            )\n        )\n    }\n\n    pub fn is_zero(self) -> bool {\n        self.inner == 0\n    }\n\n    pub fn assert_is_zero(self) {\n        assert(self.to_field() == 0);\n    }\n\n    pub fn conditional_assign(predicate: bool, lhs: Self, rhs: Self) -> Self {\n        let result = utils::conditional_assign(predicate, rhs.to_field(), lhs.to_field());\n        Self { inner: result }\n    }\n}\n\n#[test]\nfn compute_address_from_partial_and_pub_keys_hash() {\n    let pub_keys_hash = PublicKeysHash::from_field(1);\n    let partial_address = PartialAddress::from_field(2);\n\n    let address = AztecAddress::compute(pub_keys_hash, partial_address);\n    let expected_computed_address_from_partial_and_pubkey = 0x23ce9be3fa3c846b0f9245cc796902e731d04f086e8a42473bb29e405fc98075;\n    assert(address.to_field() == expected_computed_address_from_partial_and_pubkey);\n}\n\n#[test]\nfn from_field_to_field() {\n    let address = AztecAddress { inner: 37 };\n    assert_eq(FromField::from_field(address.to_field()), address);\n}\n\n#[test]\nfn serde() {\n    let address = AztecAddress { inner: 37 };\n    assert_eq(Deserialize::deserialize(address.serialize()), address);\n}\n"},"310":{"path":"/Users/rafi/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.56.0/noir-projects/noir-protocol-circuits/crates/types/src/address/salted_initialization_hash.nr","source":"use crate::{\n    address::{aztec_address::AztecAddress}, constants::GENERATOR_INDEX__PARTIAL_ADDRESS,\n    hash::poseidon2_hash_with_separator, traits::ToField\n};\n\n// Salted initialization hash. Used in the computation of a partial address.\npub struct SaltedInitializationHash {\n    inner: Field\n}\n\nimpl ToField for SaltedInitializationHash {\n    fn to_field(self) -> Field {\n        self.inner\n    }\n}\n\nimpl SaltedInitializationHash {\n    pub fn from_field(field: Field) -> Self {\n        Self { inner: field }\n    }\n\n    pub fn compute(salt: Field, initialization_hash: Field, deployer: AztecAddress) -> Self {\n        SaltedInitializationHash::from_field(\n            poseidon2_hash_with_separator(\n                [\n            salt,\n            initialization_hash,\n            deployer.to_field()\n        ],\n                GENERATOR_INDEX__PARTIAL_ADDRESS\n            )\n        )\n    }\n\n    pub fn assert_is_zero(self) {\n        assert(self.to_field() == 0);\n    }\n}\n"},"311":{"path":"/Users/rafi/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.56.0/noir-projects/noir-protocol-circuits/crates/types/src/address/partial_address.nr","source":"use crate::{\n    address::{salted_initialization_hash::SaltedInitializationHash, aztec_address::AztecAddress},\n    constants::GENERATOR_INDEX__PARTIAL_ADDRESS, contract_class_id::ContractClassId,\n    hash::poseidon2_hash_with_separator, traits::{ToField, Serialize, Deserialize}\n};\n\nglobal PARTIAL_ADDRESS_LENGTH: u32 = 1;\n\n// Partial address\npub struct PartialAddress {\n    inner : Field\n}\n\nimpl ToField for PartialAddress {\n    fn to_field(self) -> Field {\n        self.inner\n    }\n}\n\nimpl Serialize<PARTIAL_ADDRESS_LENGTH> for PartialAddress {\n    fn serialize(self: Self) -> [Field; PARTIAL_ADDRESS_LENGTH] {\n        [self.to_field()]\n    }\n}\n\nimpl Deserialize<PARTIAL_ADDRESS_LENGTH> for PartialAddress {\n    fn deserialize(fields: [Field; PARTIAL_ADDRESS_LENGTH]) -> Self {\n        PartialAddress { inner: fields[0] }\n    }\n}\n\nimpl PartialAddress {\n    pub fn from_field(field: Field) -> Self {\n        Self { inner: field }\n    }\n\n    pub fn compute(\n        contract_class_id: ContractClassId,\n        salt: Field,\n        initialization_hash: Field,\n        deployer: AztecAddress\n    ) -> Self {\n        PartialAddress::compute_from_salted_initialization_hash(\n            contract_class_id,\n            SaltedInitializationHash::compute(salt, initialization_hash, deployer)\n        )\n    }\n\n    pub fn compute_from_salted_initialization_hash(\n        contract_class_id: ContractClassId,\n        salted_initialization_hash: SaltedInitializationHash\n    ) -> Self {\n        PartialAddress::from_field(\n            poseidon2_hash_with_separator(\n                [\n            contract_class_id.to_field(),\n            salted_initialization_hash.to_field()\n        ],\n                GENERATOR_INDEX__PARTIAL_ADDRESS\n            )\n        )\n    }\n\n    pub fn to_field(self) -> Field {\n        self.inner\n    }\n\n    pub fn is_zero(self) -> bool {\n        self.to_field() == 0\n    }\n\n    pub fn assert_is_zero(self) {\n        assert(self.to_field() == 0);\n    }\n}\n"},"316":{"path":"/Users/rafi/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.56.0/noir-projects/noir-protocol-circuits/crates/types/src/hash.nr","source":"use crate::{\n    abis::{\n    contract_class_function_leaf_preimage::ContractClassFunctionLeafPreimage,\n    function_selector::FunctionSelector, log_hash::{LogHash, ScopedLogHash, ScopedEncryptedLogHash},\n    note_hash::ScopedNoteHash, nullifier::ScopedNullifier\n},\n    address::{AztecAddress, EthAddress},\n    constants::{\n    FUNCTION_TREE_HEIGHT, GENERATOR_INDEX__SILOED_NOTE_HASH, GENERATOR_INDEX__OUTER_NULLIFIER,\n    GENERATOR_INDEX__VK, GENERATOR_INDEX__NOTE_HASH_NONCE, GENERATOR_INDEX__UNIQUE_NOTE_HASH,\n    MAX_ENCRYPTED_LOGS_PER_TX, MAX_NOTE_ENCRYPTED_LOGS_PER_TX\n},\n    merkle_tree::root::root_from_sibling_path,\n    messaging::l2_to_l1_message::{L2ToL1Message, ScopedL2ToL1Message},\n    recursion::verification_key::VerificationKey, traits::{is_empty, ToField},\n    utils::field::field_from_bytes_32_trunc\n};\nuse super::utils::field::field_from_bytes;\n\npub fn sha256_to_field<let N: u32>(bytes_to_hash: [u8; N]) -> Field {\n    let sha256_hashed = std::hash::sha256(bytes_to_hash);\n    let hash_in_a_field = field_from_bytes_32_trunc(sha256_hashed);\n\n    hash_in_a_field\n}\n\npub fn private_functions_root_from_siblings(\n    selector: FunctionSelector,\n    vk_hash: Field,\n    function_leaf_index: Field,\n    function_leaf_sibling_path: [Field; FUNCTION_TREE_HEIGHT]\n) -> Field {\n    let function_leaf_preimage = ContractClassFunctionLeafPreimage { selector, vk_hash };\n    let function_leaf = function_leaf_preimage.hash();\n    root_from_sibling_path(function_leaf, function_leaf_index, function_leaf_sibling_path)\n}\n\nfn compute_note_hash_nonce(tx_hash: Field, note_index_in_tx: u32) -> Field {\n    // Hashing tx hash with note index in tx is guaranteed to be unique\n    poseidon2_hash_with_separator(\n        [\n        tx_hash,\n        note_index_in_tx as Field\n    ],\n        GENERATOR_INDEX__NOTE_HASH_NONCE\n    )\n}\n\npub fn compute_unique_note_hash(nonce: Field, note_hash: Field) -> Field {\n    let inputs = [nonce, note_hash];\n    poseidon2_hash_with_separator(inputs, GENERATOR_INDEX__UNIQUE_NOTE_HASH)\n}\n\npub fn compute_siloed_note_hash(app: AztecAddress, unique_note_hash: Field) -> Field {\n    poseidon2_hash_with_separator(\n        [\n        app.to_field(),\n        unique_note_hash\n    ],\n        GENERATOR_INDEX__SILOED_NOTE_HASH\n    )\n}\n\n/// Siloing in the context of Aztec refers to the process of hashing a note hash with a contract address (this way\n/// the note hash is scoped to a specific contract). This is used to prevent intermingling of notes between contracts.\npub fn silo_note_hash(note_hash: ScopedNoteHash, tx_hash: Field, note_index_in_tx: u32) -> Field {\n    if note_hash.contract_address.is_zero() {\n        0\n    } else {\n        let nonce = compute_note_hash_nonce(tx_hash, note_index_in_tx);\n        let unique_note_hash = compute_unique_note_hash(nonce, note_hash.value());\n        compute_siloed_note_hash(note_hash.contract_address, unique_note_hash)\n    }\n}\n\npub fn compute_siloed_nullifier(app: AztecAddress, nullifier: Field) -> Field {\n    poseidon2_hash_with_separator(\n        [\n        app.to_field(),\n        nullifier\n    ],\n        GENERATOR_INDEX__OUTER_NULLIFIER\n    )\n}\n\npub fn silo_nullifier(nullifier: ScopedNullifier) -> Field {\n    if nullifier.contract_address.is_zero() {\n        nullifier.value() // Return value instead of 0 because the first nullifier's contract address is zero.\n    } else {\n        compute_siloed_nullifier(nullifier.contract_address, nullifier.value())\n    }\n}\n\npub fn silo_encrypted_log_hash(log_hash: ScopedLogHash) -> Field {\n    // We assume contract address has already been masked\n    if log_hash.contract_address.is_zero() {\n        0\n    } else {\n        accumulate_sha256([log_hash.contract_address.to_field(), log_hash.log_hash.value])\n    }\n}\n\npub fn mask_encrypted_log_hash(scoped_log: ScopedEncryptedLogHash) -> AztecAddress {\n    if scoped_log.contract_address.is_zero() {\n        AztecAddress::from_field(0)\n    } else if (scoped_log.log_hash.randomness == 0) {\n        scoped_log.contract_address\n    } else {\n        AztecAddress::from_field(\n            poseidon2_hash_with_separator(\n                [scoped_log.contract_address.to_field(), scoped_log.log_hash.randomness],\n                0\n            )\n        )\n    }\n}\n\nfn compute_siloed_unencrypted_log_hash(address: AztecAddress, log_hash: Field) -> Field {\n    accumulate_sha256([address.to_field(), log_hash])\n}\n\npub fn silo_unencrypted_log_hash(log_hash: ScopedLogHash) -> Field {\n    if log_hash.contract_address.is_zero() {\n        0\n    } else {\n        compute_siloed_unencrypted_log_hash(log_hash.contract_address, log_hash.value())\n    }\n}\n\npub fn merkle_hash(left: Field, right: Field) -> Field {\n    poseidon2_hash([left, right])\n}\n\npub fn stdlib_recursion_verification_key_compress_native_vk(_vk: VerificationKey) -> Field {\n    // Original cpp code\n    // stdlib::recursion::verification_key<CT::bn254>::compress_native(private_call.vk, GeneratorIndex::VK);\n    // The above cpp method is only ever called on verification key, so it has been special cased here\n    let _hash_index = GENERATOR_INDEX__VK;\n    0\n}\n\npub fn compute_l2_to_l1_hash(\n    contract_address: AztecAddress,\n    recipient: EthAddress,\n    content: Field,\n    rollup_version_id: Field,\n    chain_id: Field\n) -> Field {\n    let mut bytes: BoundedVec<u8, 160> = BoundedVec::new();\n\n    let inputs = [contract_address.to_field(), rollup_version_id, recipient.to_field(), chain_id, content];\n    for i in 0..inputs.len() {\n        // TODO are bytes be in fr.to_buffer() ?\n        let item_bytes: [u8; 32] = inputs[i].to_be_bytes();\n        for j in 0..32 {\n            bytes.push(item_bytes[j]);\n        }\n    }\n\n    sha256_to_field(bytes.storage)\n}\n\npub fn silo_l2_to_l1_message(msg: ScopedL2ToL1Message, rollup_version_id: Field, chain_id: Field) -> Field {\n    if msg.contract_address.is_zero() {\n        0\n    } else {\n        compute_l2_to_l1_hash(\n            msg.contract_address,\n            msg.message.recipient,\n            msg.message.content,\n            rollup_version_id,\n            chain_id\n        )\n    }\n}\n\n// Computes sha256 hash of 2 input hashes.\n//\n// NB: This method now takes in two 31 byte fields - it assumes that any input\n// is the result of a sha_to_field hash and => is truncated\n//\n// TODO(Jan and David): This is used for the encrypted_log hashes.\n// Can we check to see if we can just use hash_to_field or pedersen_compress here?\n//\npub fn accumulate_sha256(input: [Field; 2]) -> Field {\n    // This is a note about the cpp code, since it takes an array of Fields\n    // instead of a U128.\n    // 4 Field elements when converted to bytes will usually\n    // occupy 4 * 32 = 128 bytes.\n    // However, this function is making the assumption that each Field\n    // only occupies 128 bits.\n    //\n    // TODO(David): This does not seem to be getting guaranteed anywhere in the code?\n\n    // Concatentate two fields into 32x2 = 64 bytes\n    // accumulate_sha256 assumes that the inputs are pre-truncated 31 byte numbers\n    let mut hash_input_flattened = [0; 64];\n    for offset in 0..input.len() {\n        let input_as_bytes: [u8; 32] = input[offset].to_be_bytes();\n        for byte_index in 0..32 {\n            hash_input_flattened[offset * 32 + byte_index] = input_as_bytes[byte_index];\n        }\n    }\n\n    sha256_to_field(hash_input_flattened)\n}\n\n// Computes the final logs hash for a tx.\n// NB: this assumes MAX_ENCRYPTED_LOGS_PER_TX == MAX_UNENCRYPTED_LOGS_PER_TX\n// to avoid doubling code, since we can't define the byte len to be 32*N directly.\npub fn compute_tx_logs_hash(logs: [LogHash; MAX_ENCRYPTED_LOGS_PER_TX]) -> Field {\n    // Convert each field element into a byte array and append the bytes to `hash_input_flattened`\n    let mut hash_input_flattened = [0; MAX_ENCRYPTED_LOGS_PER_TX * 32];\n    for offset in 0..MAX_ENCRYPTED_LOGS_PER_TX {\n        let input_as_bytes: [u8; 32] = logs[offset].value.to_be_bytes();\n        for byte_index in 0..32 {\n            hash_input_flattened[offset * 32 + byte_index] = input_as_bytes[byte_index];\n        }\n    }\n    // Ideally we would push to a slice then hash, but there is no sha_slice\n    // Hardcode to 256 bytes for now\n    let mut hash = sha256_to_field(hash_input_flattened);\n    // Not having a 0 value hash for empty logs causes issues with empty txs\n    // used for padding. Returning early is currently unsupported.\n    // We always provide sorted logs here, so 0 being empty means all are empty.\n    if is_empty(logs[0]) {\n        hash = 0;\n    }\n    hash\n}\n\npub fn compute_tx_note_logs_hash(logs: [LogHash; MAX_NOTE_ENCRYPTED_LOGS_PER_TX]) -> Field {\n    // Convert each field element into a byte array and append the bytes to `hash_input_flattened`\n    let mut hash_input_flattened = [0; MAX_NOTE_ENCRYPTED_LOGS_PER_TX * 32];\n    for offset in 0..MAX_NOTE_ENCRYPTED_LOGS_PER_TX {\n        let input_as_bytes: [u8; 32] = logs[offset].value.to_be_bytes();\n        for byte_index in 0..32 {\n            hash_input_flattened[offset * 32 + byte_index] = input_as_bytes[byte_index];\n        }\n    }\n    // Ideally we would push to a slice then hash, but there is no sha_slice\n    // Hardcode to 256 bytes for now\n    let mut hash = sha256_to_field(hash_input_flattened);\n    // Not having a 0 value hash for empty logs causes issues with empty txs\n    // used for padding. Returning early is currently unsupported.\n    // We always provide sorted logs here, so 0 being empty means all are empty.\n    if is_empty(logs[0]) {\n        hash = 0;\n    }\n    hash\n}\n\npub fn pedersen_hash<let N: u32>(inputs: [Field; N], hash_index: u32) -> Field {\n    std::hash::pedersen_hash_with_separator(inputs, hash_index)\n}\n\npub fn poseidon2_hash<let N: u32>(inputs: [Field; N]) -> Field {\n    std::hash::poseidon2::Poseidon2::hash(inputs, N)\n}\n\n#[no_predicates]\npub fn poseidon2_hash_with_separator<let N: u32, T>(\n    inputs: [Field; N],\n    separator: T\n) -> Field where T: ToField {\n    // We manually hash the inputs here, since we cannot express with the type system a constant size inputs array of N + 1\n    let in_len = N + 1;\n    let two_pow_64 = 18446744073709551616;\n    let iv : Field = (in_len as Field) * two_pow_64;\n    let mut sponge = std::hash::poseidon2::Poseidon2::new(iv);\n    sponge.absorb(separator.to_field());\n\n    for i in 0..inputs.len() {\n        sponge.absorb(inputs[i]);\n    }\n\n    sponge.squeeze()\n}\n\npub fn poseidon2_hash_with_separator_slice<T>(inputs: [Field], separator: T) -> Field where T: ToField {\n    let in_len = inputs.len() + 1;\n    let two_pow_64 = 18446744073709551616;\n    let iv : Field = (in_len as Field) * two_pow_64;\n    let mut sponge = std::hash::poseidon2::Poseidon2::new(iv);\n    sponge.absorb(separator.to_field());\n\n    for i in 0..inputs.len() {\n        sponge.absorb(inputs[i]);\n    }\n\n    sponge.squeeze()\n}\n\n#[no_predicates]\npub fn poseidon2_hash_bytes<let N: u32>(inputs: [u8; N]) -> Field {\n    // We manually hash the inputs here, since we cannot express with the type system a constant size inputs array of Math.ceil(N/31)\n    let mut in_len = N / 31;\n    let mut has_padding = false;\n    if N % 31 != 0 {\n        in_len += 1;\n        has_padding = true;\n    }\n\n    let two_pow_64 = 18446744073709551616;\n    let iv : Field = (in_len as Field) * two_pow_64;\n    let mut sponge = std::hash::poseidon2::Poseidon2::new(iv);\n\n    let mut current_field = [0; 31];\n    for i in 0..inputs.len() {\n        let index = i % 31;\n        current_field[index] = inputs[i];\n        if index == 30 {\n            sponge.absorb(field_from_bytes(current_field, false));\n            current_field = [0; 31];\n        }\n    }\n    if has_padding {\n        sponge.absorb(field_from_bytes(current_field, false));\n    }\n\n    sponge.squeeze()\n}\n\n#[test]\nfn smoke_sha256_to_field() {\n    let full_buffer = [\n        0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19,\n        20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39,\n        40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59,\n        60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79,\n        80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99,\n        100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119,\n        120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139,\n        140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159\n    ];\n    let result = sha256_to_field(full_buffer);\n\n    assert(result == 0x448ebbc9e1a31220a2f3830c18eef61b9bd070e5084b7fa2a359fe729184c7);\n\n    // to show correctness of the current ver (truncate one byte) vs old ver (mod full bytes):\n    let result_bytes = std::hash::sha256(full_buffer);\n    let truncated_field = crate::utils::field::field_from_bytes_32_trunc(result_bytes);\n    assert(truncated_field == result);\n    let mod_res = result + (result_bytes[31] as Field);\n    assert(mod_res == 0x448ebbc9e1a31220a2f3830c18eef61b9bd070e5084b7fa2a359fe729184e0);\n}\n\n#[test]\nfn compute_l2_l1_hash() {\n    // All zeroes\n    let hash_result = compute_l2_to_l1_hash(AztecAddress::from_field(0), EthAddress::zero(), 0, 0, 0);\n    assert(hash_result == 0xb393978842a0fa3d3e1470196f098f473f9678e72463cb65ec4ab5581856c2);\n\n    // Non-zero case\n    let hash_result = compute_l2_to_l1_hash(AztecAddress::from_field(1), EthAddress::from_field(3), 5, 2, 4);\n    assert(hash_result == 0x3f88c1044a05e5340ed20466276500f6d45ca5603913b9091e957161734e16);\n}\n\n#[test]\nfn silo_l2_to_l1_message_matches_typescript() {\n    let version = 4;\n    let chainId = 5;\n\n    let hash = silo_l2_to_l1_message(\n        ScopedL2ToL1Message {\n        message: L2ToL1Message { recipient: EthAddress::from_field(1), content: 2, counter: 0 },\n        contract_address: AztecAddress::from_field(3)\n    },\n        version,\n        chainId\n    );\n\n    // The following value was generated by `l2_to_l1_message.test.ts`\n    let hash_from_typescript = 0x00c6155d69febb9d5039b374dd4f77bf57b7c881709aa524a18acaa0bd57476a;\n\n    assert_eq(hash, hash_from_typescript);\n}\n"},"317":{"path":"/Users/rafi/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.56.0/noir-projects/noir-protocol-circuits/crates/types/src/point.nr","source":"pub use dep::std::embedded_curve_ops::EmbeddedCurvePoint as Point;\nuse crate::{traits::{Deserialize, Empty, Hash, Serialize}, hash::poseidon2_hash};\n\nglobal POINT_LENGTH: u32 = 3;\n\nimpl Serialize<POINT_LENGTH> for Point {\n    fn serialize(self: Self) -> [Field; POINT_LENGTH] {\n        [self.x, self.y, self.is_infinite as Field]\n    }\n}\n\nimpl Hash for Point {\n    fn hash(self) -> Field {\n        poseidon2_hash(self.serialize())\n    }\n}\n\nimpl Empty for Point {\n    /// Note: Does not return a valid point on curve - instead represents an empty/\"unpopulated\" point struct (e.g.\n    /// empty/unpopulated value in an array of points).\n    fn empty() -> Self {\n        Point { x: 0, y: 0, is_infinite: false }\n    }\n}\n\nimpl Deserialize<POINT_LENGTH> for Point {\n    fn deserialize(serialized: [Field; POINT_LENGTH]) -> Point {\n        Point { x: serialized[0], y: serialized[1], is_infinite: serialized[2] as bool }\n    }\n}\n"},"334":{"path":"/Users/rafi/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.56.0/noir-projects/aztec-nr/value-note/src/value_note.nr","source":"use dep::aztec::{\n    protocol_types::{traits::Serialize, constants::GENERATOR_INDEX__NOTE_NULLIFIER, hash::poseidon2_hash_with_separator},\n    macros::notes::note,\n    note::{note_header::NoteHeader, note_interface::NullifiableNote, utils::compute_note_hash_for_nullify},\n    oracle::unsafe_rand::unsafe_rand, keys::getters::get_nsk_app, context::PrivateContext\n};\n\nglobal VALUE_NOTE_LEN: u32 = 3; // 3 plus a header.\n\n// docs:start:value-note-def\n// ValueNote is used as fn parameter in the Claim contract, so it has to implement the Serialize trait.\n// It is important that the order of these annotations is preserved so that derive(Serialize) runs AFTER the note macro, which injects the note header.\n#[note]\n#[derive(Serialize)]\npub struct ValueNote {\n    value: Field,\n   // The nullifying public key hash is used with the nsk_app to ensure that the note can be privately spent.\n    npk_m_hash: Field,\n    randomness: Field,\n}\n// docs:end:value-note-def\n\nimpl NullifiableNote for ValueNote {\n    // docs:start:nullifier\n\n    fn compute_nullifier(self, context: &mut PrivateContext, note_hash_for_nullify: Field) -> Field {\n        let secret = context.request_nsk_app(self.npk_m_hash);\n        poseidon2_hash_with_separator(\n            [\n            note_hash_for_nullify,\n            secret\n        ],\n            GENERATOR_INDEX__NOTE_NULLIFIER as Field\n        )\n    }\n\n    // docs:end:nullifier\n\n    unconstrained fn compute_nullifier_without_context(self) -> Field {\n        let note_hash_for_nullify = compute_note_hash_for_nullify(self);\n        let secret = get_nsk_app(self.npk_m_hash);\n        poseidon2_hash_with_separator(\n            [\n            note_hash_for_nullify,\n            secret\n        ],\n            GENERATOR_INDEX__NOTE_NULLIFIER as Field\n        )\n    }\n}\n\nimpl ValueNote {\n    pub fn new(value: Field, npk_m_hash: Field) -> Self {\n        let randomness = unsafe_rand();\n        let header = NoteHeader::empty();\n        ValueNote { value, npk_m_hash, randomness, header }\n    }\n}\n\nimpl Eq for ValueNote {\n    fn eq(self, other: Self) -> bool {\n        (self.value == other.value)\n            & (self.npk_m_hash == other.npk_m_hash)\n            & (self.randomness == other.randomness)\n    }\n}\n"},"34":{"path":"std/hash/poseidon2.nr","source":"use crate::hash::Hasher;\nuse crate::default::Default;\n\ncomptime global RATE: u32 = 3;\n\npub struct Poseidon2 {\n    cache: [Field;3],\n    state: [Field;4],\n    cache_size: u32,\n    squeeze_mode: bool, // 0 => absorb, 1 => squeeze\n}\n\nimpl Poseidon2 {\n    #[no_predicates]\n    pub fn hash<let N: u32>(input: [Field; N], message_size: u32) -> Field {\n        if message_size == N {\n            Poseidon2::hash_internal(input, N, false)\n        } else {\n            Poseidon2::hash_internal(input, message_size, true)\n        }\n    }\n\n    fn new(iv: Field) -> Poseidon2 {\n        let mut result = Poseidon2 { cache: [0; 3], state: [0; 4], cache_size: 0, squeeze_mode: false };\n        result.state[RATE] = iv;\n        result\n    }\n\n    fn perform_duplex(&mut self) {\n        // add the cache into sponge state\n        for i in 0..RATE {\n            // We effectively zero-pad the cache by only adding to the state\n            // cache that is less than the specified `cache_size`\n            if i < self.cache_size {\n                self.state[i] += self.cache[i];\n            }\n        }\n        self.state = crate::hash::poseidon2_permutation(self.state, 4);\n    }\n\n    fn absorb(&mut self, input: Field) {\n        assert(!self.squeeze_mode);\n        if self.cache_size == RATE {\n            // If we're absorbing, and the cache is full, apply the sponge permutation to compress the cache\n            self.perform_duplex();\n            self.cache[0] = input;\n            self.cache_size = 1;\n        } else {\n            // If we're absorbing, and the cache is not full, add the input into the cache\n            self.cache[self.cache_size] = input;\n            self.cache_size += 1;\n        }\n    }\n\n    fn squeeze(&mut self) -> Field {\n        assert(!self.squeeze_mode);\n        // If we're in absorb mode, apply sponge permutation to compress the cache.\n        self.perform_duplex();\n        self.squeeze_mode = true;\n\n        // Pop one item off the top of the permutation and return it.\n        self.state[0]\n    }\n\n    fn hash_internal<let N: u32>(input: [Field; N], in_len: u32, is_variable_length: bool) -> Field {\n        let two_pow_64 = 18446744073709551616;\n        let iv : Field = (in_len as Field) * two_pow_64;\n        let mut sponge = Poseidon2::new(iv);\n        for i in 0..input.len() {\n            if i < in_len {\n                sponge.absorb(input[i]);\n            }\n        }\n\n        // In the case where the hash preimage is variable-length, we append `1` to the end of the input, to distinguish\n        // from fixed-length hashes. (the combination of this additional field element + the hash IV ensures\n        // fixed-length and variable-length hashes do not collide)\n        if is_variable_length {\n            sponge.absorb(1);\n        }\n        sponge.squeeze()\n    }\n}\n\npub struct Poseidon2Hasher{\n    _state: [Field],\n}\n\nimpl Hasher for Poseidon2Hasher {\n    fn finish(self) -> Field {\n        let iv : Field = (self._state.len() as Field) * 18446744073709551616; // iv = (self._state.len() << 64)\n        let mut sponge = Poseidon2::new(iv);\n        for i in 0..self._state.len() {\n            sponge.absorb(self._state[i]);\n        }\n        sponge.squeeze()\n    }\n\n    fn write(&mut self, input: Field) {\n        self._state = self._state.push_back(input);\n    }\n}\n\nimpl Default for Poseidon2Hasher {\n    fn default() -> Self {\n        Poseidon2Hasher { _state: &[] }\n    }\n}\n"},"58":{"path":"std/option.nr","source":"use crate::hash::{Hash, Hasher};\nuse crate::cmp::{Ordering, Ord, Eq};\nuse crate::default::Default;\n\npub struct Option<T> {\n    _is_some: bool,\n    _value: T,\n}\n\nimpl<T> Option<T> {\n    /// Constructs a None value\n    pub fn none() -> Self {\n        Self { _is_some: false, _value: crate::mem::zeroed() }\n    }\n\n    /// Constructs a Some wrapper around the given value\n    pub fn some(_value: T) -> Self {\n        Self { _is_some: true, _value }\n    }\n\n    /// True if this Option is None\n    pub fn is_none(self) -> bool {\n        !self._is_some\n    }\n\n    /// True if this Option is Some\n    pub fn is_some(self) -> bool {\n        self._is_some\n    }\n\n    /// Asserts `self.is_some()` and returns the wrapped value.\n    pub fn unwrap(self) -> T {\n        assert(self._is_some);\n        self._value\n    }\n\n    /// Returns the inner value without asserting `self.is_some()`\n    /// Note that if `self` is `None`, there is no guarantee what value will be returned,\n    /// only that it will be of type `T`.\n    pub fn unwrap_unchecked(self) -> T {\n        self._value\n    }\n\n    /// Returns the wrapped value if `self.is_some()`. Otherwise, returns the given default value.\n    pub fn unwrap_or(self, default: T) -> T {\n        if self._is_some { self._value } else { default }\n    }\n\n    /// Returns the wrapped value if `self.is_some()`. Otherwise, calls the given function to return\n    /// a default value.\n    pub fn unwrap_or_else<Env>(self, default: fn[Env]() -> T) -> T {\n        if self._is_some {\n            self._value\n        } else {\n            default()\n        }\n    }\n\n    /// Asserts `self.is_some()` with a provided custom message and returns the contained `Some` value\n    fn expect<let N: u32, MessageTypes>(self, message: fmtstr<N, MessageTypes>) -> T {\n        assert(self.is_some(), message);\n        self._value\n    }\n\n    /// If self is `Some(x)`, this returns `Some(f(x))`. Otherwise, this returns `None`.\n    pub fn map<U, Env>(self, f: fn[Env](T) -> U) -> Option<U> {\n        if self._is_some {\n            Option::some(f(self._value))\n        } else {\n            Option::none()\n        }\n    }\n\n    /// If self is `Some(x)`, this returns `f(x)`. Otherwise, this returns the given default value.\n    pub fn map_or<U, Env>(self, default: U, f: fn[Env](T) -> U) -> U {\n        if self._is_some {\n            f(self._value)\n        } else {\n            default\n        }\n    }\n\n    /// If self is `Some(x)`, this returns `f(x)`. Otherwise, this returns `default()`.\n    pub fn map_or_else<U, Env1, Env2>(self, default: fn[Env1]() -> U, f: fn[Env2](T) -> U) -> U {\n        if self._is_some {\n            f(self._value)\n        } else {\n            default()\n        }\n    }\n\n    /// Returns None if self is None. Otherwise, this returns `other`.\n    pub fn and(self, other: Self) -> Self {\n        if self.is_none() {\n            Option::none()\n        } else {\n            other\n        }\n    }\n\n    /// If self is None, this returns None. Otherwise, this calls the given function\n    /// with the Some value contained within self, and returns the result of that call.\n    ///\n    /// In some languages this function is called `flat_map` or `bind`.\n    pub fn and_then<U, Env>(self, f: fn[Env](T) -> Option<U>) -> Option<U> {\n        if self._is_some {\n            f(self._value)\n        } else {\n            Option::none()\n        }\n    }\n\n    /// If self is Some, return self. Otherwise, return `other`.\n    pub fn or(self, other: Self) -> Self {\n        if self._is_some { self } else { other }\n    }\n\n    /// If self is Some, return self. Otherwise, return `default()`.\n    pub fn or_else<Env>(self, default: fn[Env]() -> Self) -> Self {\n        if self._is_some { self } else { default() }\n    }\n\n    // If only one of the two Options is Some, return that option.\n    // Otherwise, if both options are Some or both are None, None is returned.\n    pub fn xor(self, other: Self) -> Self {\n        if self._is_some {\n            if other._is_some { Option::none() } else { self }\n        } else if other._is_some {\n            other\n        } else {\n            Option::none()\n        }\n    }\n\n    /// Returns `Some(x)` if self is `Some(x)` and `predicate(x)` is true.\n    /// Otherwise, this returns `None`\n    pub fn filter<Env>(self, predicate: fn[Env](T) -> bool) -> Self {\n        if self._is_some {\n            if predicate(self._value) {\n                self\n            } else {\n                Option::none()\n            }\n        } else {\n            Option::none()\n        }\n    }\n\n    /// Flattens an Option<Option<T>> into a Option<T>.\n    /// This returns None if the outer Option is None. Otherwise, this returns the inner Option.\n    pub fn flatten(option: Option<Option<T>>) -> Option<T> {\n        if option._is_some {\n            option._value\n        } else {\n            Option::none()\n        }\n    }\n}\n\nimpl<T> Default for Option<T> {\n    fn default() -> Self {\n        Option::none()\n    }\n}\n\nimpl<T> Eq for Option<T> where T: Eq {\n    fn eq(self, other: Self) -> bool {\n        if self._is_some == other._is_some {\n            if self._is_some {\n                self._value == other._value\n            } else {\n                true\n            }\n        } else {\n            false\n        }\n    }\n}\n\nimpl<T> Hash for Option<T> where T: Hash {\n    fn hash<H>(self, state: &mut H) where H: Hasher {\n        self._is_some.hash(state);\n        if self._is_some {\n            self._value.hash(state);\n        }\n    }\n}\n\n// For this impl we're declaring Option::none < Option::some\nimpl<T> Ord for Option<T> where T: Ord {\n    fn cmp(self, other: Self) -> Ordering {\n        if self._is_some {\n            if other._is_some {\n                self._value.cmp(other._value)\n            } else {\n                Ordering::greater()\n            }\n        } else if other._is_some {\n            Ordering::less()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n"},"59":{"path":"std/panic.nr","source":"pub fn panic<T, U, let N: u32>(message: fmtstr<N, T>) -> U {\n    assert(false, message);\n    crate::mem::zeroed()\n}\n"},"7":{"path":"std/collections/bounded_vec.nr","source":"use crate::{cmp::Eq, convert::From};\n\n/// A `BoundedVec<T, MaxLen>` is a growable storage similar to a `Vec<T>` except that it\n/// is bounded with a maximum possible length. Unlike `Vec`, `BoundedVec` is not implemented\n/// via slices and thus is not subject to the same restrictions slices are (notably, nested\n/// slices - and thus nested vectors as well - are disallowed).\n/// \n/// Since a BoundedVec is backed by a normal array under the hood, growing the BoundedVec by\n/// pushing an additional element is also more efficient - the length only needs to be increased\n/// by one.\n/// \n/// For these reasons `BoundedVec<T, N>` should generally be preferred over `Vec<T>` when there\n/// is a reasonable maximum bound that can be placed on the vector.\n/// \n/// Example:\n/// \n/// ```noir\n/// let mut vector: BoundedVec<Field, 10> = BoundedVec::new();\n/// for i in 0..5 {\n///     vector.push(i);\n/// }\n/// assert(vector.len() == 5);\n/// assert(vector.max_len() == 10);\n/// ```\npub struct BoundedVec<T, let MaxLen: u32> {\n    storage: [T; MaxLen],\n    len: u32,\n}\n\nimpl<T, let MaxLen: u32> BoundedVec<T, MaxLen> {\n    /// Creates a new, empty vector of length zero.\n    ///\n    /// Since this container is backed by an array internally, it still needs an initial value\n    /// to give each element. To resolve this, each element is zeroed internally. This value\n    /// is guaranteed to be inaccessible unless `get_unchecked` is used.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let empty_vector: BoundedVec<Field, 10> = BoundedVec::new();\n    /// assert(empty_vector.len() == 0);\n    /// ```\n    ///\n    /// Note that whenever calling `new` the maximum length of the vector should always be specified\n    /// via a type signature:\n    ///\n    /// ```noir\n    /// fn good() -> BoundedVec<Field, 10> {\n    ///     // Ok! MaxLen is specified with a type annotation\n    ///     let v1: BoundedVec<Field, 3> = BoundedVec::new();\n    ///     let v2 = BoundedVec::new();\n    ///\n    ///     // Ok! MaxLen is known from the type of `good`'s return value\n    ///     v2\n    /// }\n    ///\n    /// fn bad() {\n    ///     // Error: Type annotation needed\n    ///     // The compiler can't infer `MaxLen` from the following code:\n    ///     let mut v3 = BoundedVec::new();\n    ///     v3.push(5);\n    /// }\n    /// ```\n    ///\n    /// This defaulting of `MaxLen` (and numeric generics in general) to zero may change in future noir versions\n    /// but for now make sure to use type annotations when using bounded vectors. Otherwise, you will receive a \n    /// constraint failure at runtime when the vec is pushed to.\n    pub fn new() -> Self {\n        let zeroed = crate::mem::zeroed();\n        BoundedVec { storage: [zeroed; MaxLen], len: 0 }\n    }\n\n    /// Retrieves an element from the vector at the given index, starting from zero.\n    /// \n    /// If the given index is equal to or greater than the length of the vector, this\n    /// will issue a constraint failure.\n    /// \n    /// Example:\n    /// \n    /// ```noir\n    /// fn foo<let N: u32>(v: BoundedVec<u32, N>) {\n    ///     let first = v.get(0);\n    ///     let last = v.get(v.len() - 1);\n    ///     assert(first != last);\n    /// }\n    /// ```\n    pub fn get(self, index: u32) -> T {\n        assert(index < self.len, \"Attempted to read past end of BoundedVec\");\n        self.get_unchecked(index)\n    }\n\n    /// Retrieves an element from the vector at the given index, starting from zero, without\n    /// performing a bounds check.\n    /// \n    /// Since this function does not perform a bounds check on length before accessing the element,\n    /// it is unsafe! Use at your own risk!\n    /// \n    /// Example:\n    /// \n    /// ```noir\n    /// fn sum_of_first_three<let N: u32>(v: BoundedVec<u32, N>) -> u32 {\n    ///     // Always ensure the length is larger than the largest\n    ///     // index passed to get_unchecked\n    ///     assert(v.len() > 2);\n    ///     let first = v.get_unchecked(0);\n    ///     let second = v.get_unchecked(1);\n    ///     let third = v.get_unchecked(2);\n    ///     first + second + third\n    /// }\n    /// ```\n    pub fn get_unchecked(self, index: u32) -> T {\n        self.storage[index]\n    }\n\n    /// Writes an element to the vector at the given index, starting from zero.\n    /// \n    /// If the given index is equal to or greater than the length of the vector, this will issue a constraint failure.\n    /// \n    /// Example:\n    /// \n    /// ```noir\n    /// fn foo<let N: u32>(v: BoundedVec<u32, N>) {\n    ///     let first = v.get(0);\n    ///     assert(first != 42);\n    ///     v.set(0, 42);\n    ///     let new_first = v.get(0);\n    ///     assert(new_first == 42);\n    /// }\n    /// ```\n    pub fn set(&mut self, index: u32, value: T) {\n        assert(index < self.len, \"Attempted to write past end of BoundedVec\");\n        self.set_unchecked(index, value)\n    }\n\n    /// Writes an element to the vector at the given index, starting from zero, without performing a bounds check.\n    /// \n    /// Since this function does not perform a bounds check on length before accessing the element, it is unsafe! Use at your own risk!\n    /// \n    /// Example:\n    /// \n    /// ```noir\n    /// fn set_unchecked_example() {\n    ///     let mut vec: BoundedVec<u32, 5> = BoundedVec::new();\n    ///     vec.extend_from_array([1, 2]);\n    /// \n    ///     // Here we're safely writing within the valid range of `vec`\n    ///     // `vec` now has the value [42, 2]\n    ///     vec.set_unchecked(0, 42);\n    /// \n    ///     // We can then safely read this value back out of `vec`.\n    ///     // Notice that we use the checked version of `get` which would prevent reading unsafe values.\n    ///     assert_eq(vec.get(0), 42);\n    /// \n    ///     // We've now written past the end of `vec`.\n    ///     // As this index is still within the maximum potential length of `v`,\n    ///     // it won't cause a constraint failure. \n    ///     vec.set_unchecked(2, 42);\n    ///     println(vec);\n    /// \n    ///     // This will write past the end of the maximum potential length of `vec`,\n    ///     // it will then trigger a constraint failure.\n    ///     vec.set_unchecked(5, 42);\n    ///     println(vec);\n    /// }\n    /// ```\n    pub fn set_unchecked(&mut self, index: u32, value: T) {\n        self.storage[index] = value;\n    }\n\n    /// Pushes an element to the end of the vector. This increases the length\n    /// of the vector by one.\n    /// \n    /// Panics if the new length of the vector will be greater than the max length.\n    /// \n    /// Example:\n    /// \n    /// ```noir\n    /// let mut v: BoundedVec<Field, 2> = BoundedVec::new();\n    /// \n    /// v.push(1);\n    /// v.push(2);\n    /// \n    /// // Panics with failed assertion \"push out of bounds\"\n    /// v.push(3);\n    /// ```\n    pub fn push(&mut self, elem: T) {\n        assert(self.len < MaxLen, \"push out of bounds\");\n\n        self.storage[self.len] = elem;\n        self.len += 1;\n    }\n\n    /// Returns the current length of this vector\n    /// \n    /// Example:\n    /// \n    /// ```noir\n    /// let mut v: BoundedVec<Field, 4> = BoundedVec::new();\n    /// assert(v.len() == 0);\n    /// \n    /// v.push(100);\n    /// assert(v.len() == 1);\n    /// \n    /// v.push(200);\n    /// v.push(300);\n    /// v.push(400);\n    /// assert(v.len() == 4);\n    /// \n    /// let _ = v.pop();\n    /// let _ = v.pop();\n    /// assert(v.len() == 2);\n    /// ```\n    pub fn len(self) -> u32 {\n        self.len\n    }\n\n    /// Returns the maximum length of this vector. This is always\n    /// equal to the `MaxLen` parameter this vector was initialized with.\n    /// \n    /// Example:\n    /// \n    /// ```noir\n    /// let mut v: BoundedVec<Field, 5> = BoundedVec::new();\n    /// \n    /// assert(v.max_len() == 5);\n    /// v.push(10);\n    /// assert(v.max_len() == 5);\n    /// ```\n    pub fn max_len(_self: BoundedVec<T, MaxLen>) -> u32 {\n        MaxLen\n    }\n\n    /// Returns the internal array within this vector.\n    /// \n    /// Since arrays in Noir are immutable, mutating the returned storage array will not mutate\n    /// the storage held internally by this vector.\n    /// \n    /// Note that uninitialized elements may be zeroed out!\n    /// \n    /// Example:\n    /// \n    /// ```noir\n    /// let mut v: BoundedVec<Field, 5> = BoundedVec::new();\n    /// \n    /// assert(v.storage() == [0, 0, 0, 0, 0]);\n    /// \n    /// v.push(57);\n    /// assert(v.storage() == [57, 0, 0, 0, 0]);\n    /// ```\n    pub fn storage(self) -> [T; MaxLen] {\n        self.storage\n    }\n\n    /// Pushes each element from the given array to this vector.\n    /// \n    /// Panics if pushing each element would cause the length of this vector\n    /// to exceed the maximum length.\n    /// \n    /// Example:\n    /// \n    /// ```noir\n    /// let mut vec: BoundedVec<Field, 3> = BoundedVec::new();\n    /// vec.extend_from_array([2, 4]);\n    /// \n    /// assert(vec.len == 2);\n    /// assert(vec.get(0) == 2);\n    /// assert(vec.get(1) == 4);\n    /// ```\n    pub fn extend_from_array<let Len: u32>(&mut self, array: [T; Len]) {\n        let new_len = self.len + array.len();\n        assert(new_len <= MaxLen, \"extend_from_array out of bounds\");\n        for i in 0..array.len() {\n            self.storage[self.len + i] = array[i];\n        }\n        self.len = new_len;\n    }\n\n    /// Pushes each element from the given slice to this vector.\n    /// \n    /// Panics if pushing each element would cause the length of this vector\n    /// to exceed the maximum length.\n    /// \n    /// Example:\n    /// \n    /// ```noir\n    /// let mut vec: BoundedVec<Field, 3> = BoundedVec::new();\n    /// vec.extend_from_slice(&[2, 4]);\n    /// \n    /// assert(vec.len == 2);\n    /// assert(vec.get(0) == 2);\n    /// assert(vec.get(1) == 4);\n    /// ```\n    pub fn extend_from_slice(&mut self, slice: [T]) {\n        let new_len = self.len + slice.len();\n        assert(new_len <= MaxLen, \"extend_from_slice out of bounds\");\n        for i in 0..slice.len() {\n            self.storage[self.len + i] = slice[i];\n        }\n        self.len = new_len;\n    }\n\n    /// Pushes each element from the other vector to this vector. The length of\n    /// the other vector is left unchanged.\n    /// \n    /// Panics if pushing each element would cause the length of this vector\n    /// to exceed the maximum length.\n    /// \n    /// ```noir\n    /// let mut v1: BoundedVec<Field, 5> = BoundedVec::new();\n    /// let mut v2: BoundedVec<Field, 7> = BoundedVec::new();\n    /// \n    /// v2.extend_from_array([1, 2, 3]);\n    /// v1.extend_from_bounded_vec(v2);\n    /// \n    /// assert(v1.storage() == [1, 2, 3, 0, 0]);\n    /// assert(v2.storage() == [1, 2, 3, 0, 0, 0, 0]);\n    /// ```\n    pub fn extend_from_bounded_vec<let Len: u32>(&mut self, vec: BoundedVec<T, Len>) {\n        let append_len = vec.len();\n        let new_len = self.len + append_len;\n        assert(new_len <= MaxLen, \"extend_from_bounded_vec out of bounds\");\n\n        let mut exceeded_len = false;\n        for i in 0..Len {\n            exceeded_len |= i == append_len;\n            if !exceeded_len {\n                self.storage[self.len + i] = vec.get_unchecked(i);\n            }\n        }\n        self.len = new_len;\n    }\n\n    /// Creates a new vector, populating it with values derived from an array input. \n    /// The maximum length of the vector is determined based on the type signature.\n    /// \n    /// Example:\n    /// \n    /// ```noir\n    /// let bounded_vec: BoundedVec<Field, 10> = BoundedVec::from_array([1, 2, 3])\n    /// ```\n    pub fn from_array<let Len: u32>(array: [T; Len]) -> Self {\n        assert(Len <= MaxLen, \"from array out of bounds\");\n        let mut vec: BoundedVec<T, MaxLen> = BoundedVec::new();\n        vec.extend_from_array(array);\n        vec\n    }\n\n    /// Pops the element at the end of the vector. This will decrease the length\n    /// of the vector by one.\n    /// \n    /// Panics if the vector is empty.\n    /// \n    /// Example:\n    /// \n    /// ```noir\n    /// let mut v: BoundedVec<Field, 2> = BoundedVec::new();\n    /// v.push(1);\n    /// v.push(2);\n    /// \n    /// let two = v.pop();\n    /// let one = v.pop();\n    /// \n    /// assert(two == 2);\n    /// assert(one == 1);\n    ///\n    /// // error: cannot pop from an empty vector\n    /// let _ = v.pop();\n    /// ```\n    pub fn pop(&mut self) -> T {\n        assert(self.len > 0);\n        self.len -= 1;\n\n        let elem = self.storage[self.len];\n        self.storage[self.len] = crate::mem::zeroed();\n        elem\n    }\n\n    /// Returns true if the given predicate returns true for any element\n    /// in this vector.\n    /// \n    /// Example:\n    /// \n    /// ```noir\n    /// let mut v: BoundedVec<u32, 3> = BoundedVec::new();\n    /// v.extend_from_array([2, 4, 6]);\n    /// \n    /// let all_even = !v.any(|elem: u32| elem % 2 != 0);\n    /// assert(all_even);\n    /// ```\n    pub fn any<Env>(self, predicate: fn[Env](T) -> bool) -> bool {\n        let mut ret = false;\n        let mut exceeded_len = false;\n        for i in 0..MaxLen {\n            exceeded_len |= i == self.len;\n            if !exceeded_len {\n                ret |= predicate(self.storage[i]);\n            }\n        }\n        ret\n    }\n\n    /// Creates a new vector of equal size by calling a closure on each element in this vector.  \n    /// \n    /// Example:\n    /// \n    /// ```noir\n    /// let vec: BoundedVec<u32, 4> = BoundedVec::from_array([1, 2, 3, 4]);\n    /// let result = vec.map(|value| value * 2);\n    /// \n    /// let expected = BoundedVec::from_array([2, 4, 6, 8]);\n    /// assert_eq(result, expected);\n    /// ```\n    pub fn map<U, Env>(self, f: fn[Env](T) -> U) -> BoundedVec<U, MaxLen> {\n        let mut ret = BoundedVec::new();\n        ret.len = self.len();\n        for i in 0..MaxLen {\n            if i < self.len() {\n                ret.storage[i] = f(self.get_unchecked(i));\n            }\n        }\n        ret\n    }\n}\n\nimpl<T, let MaxLen: u32> Eq for BoundedVec<T, MaxLen> where T: Eq {\n    fn eq(self, other: BoundedVec<T, MaxLen>) -> bool {\n        // TODO: https://github.com/noir-lang/noir/issues/4837\n        //\n        // We make the assumption that the user has used the proper interface for working with `BoundedVec`s\n        // rather than directly manipulating the internal fields as this can result in an inconsistent internal state.\n\n        (self.len == other.len) & (self.storage == other.storage)\n    }\n}\n\nimpl<T, let MaxLen: u32, let Len: u32> From<[T; Len]> for BoundedVec<T, MaxLen> {\n    fn from(array: [T; Len]) -> BoundedVec<T, MaxLen> {\n        BoundedVec::from_array(array)\n    }\n}\n\nmod bounded_vec_tests {\n\n    mod get {\n        use crate::collections::bounded_vec::BoundedVec;\n\n        #[test(should_fail_with = \"Attempted to read past end of BoundedVec\")]\n        fn panics_when_reading_elements_past_end_of_vec() {\n            let vec: BoundedVec<Field, 5> = BoundedVec::new();\n\n            crate::println(vec.get(0));\n        }\n    }\n\n    mod set {\n        use crate::collections::bounded_vec::BoundedVec;\n\n        #[test]\n        fn set_updates_values_properly() {\n            let mut vec = BoundedVec::from_array([0, 0, 0, 0, 0]);\n\n            vec.set(0, 42);\n            assert_eq(vec.storage, [42, 0, 0, 0, 0]);\n\n            vec.set(1, 43);\n            assert_eq(vec.storage, [42, 43, 0, 0, 0]);\n\n            vec.set(2, 44);\n            assert_eq(vec.storage, [42, 43, 44, 0, 0]);\n\n            vec.set(1, 10);\n            assert_eq(vec.storage, [42, 10, 44, 0, 0]);\n\n            vec.set(0, 0);\n            assert_eq(vec.storage, [0, 10, 44, 0, 0]);\n        }\n\n        #[test(should_fail_with = \"Attempted to write past end of BoundedVec\")]\n        fn panics_when_writing_elements_past_end_of_vec() {\n            let mut vec: BoundedVec<Field, 5> = BoundedVec::new();\n            vec.set(0, 42);\n\n            // Need to use println to avoid DIE removing the write operation.\n            crate::println(vec.get(0));\n        }\n    }\n\n    mod map {\n        use crate::collections::bounded_vec::BoundedVec;\n\n        #[test]\n        fn applies_function_correctly() {\n            // docs:start:bounded-vec-map-example\n            let vec: BoundedVec<u32, 4> = BoundedVec::from_array([1, 2, 3, 4]);\n            let result = vec.map(|value| value * 2);\n            // docs:end:bounded-vec-map-example\n            let expected = BoundedVec::from_array([2, 4, 6, 8]);\n\n            assert_eq(result, expected);\n        }\n\n        #[test]\n        fn applies_function_that_changes_return_type() {\n            let vec: BoundedVec<u32, 4> = BoundedVec::from_array([1, 2, 3, 4]);\n            let result = vec.map(|value| (value * 2)  as Field);\n            let expected: BoundedVec<Field, 4> = BoundedVec::from_array([2, 4, 6, 8]);\n\n            assert_eq(result, expected);\n        }\n\n        #[test]\n        fn does_not_apply_function_past_len() {\n            let vec: BoundedVec<u32, 3> = BoundedVec::from_array([0, 1]);\n            let result = vec.map(|value| if value == 0 { 5 } else { value });\n            let expected = BoundedVec::from_array([5, 1]);\n\n            assert_eq(result, expected);\n            assert_eq(result.storage()[2], 0);\n        }\n    }\n\n    mod from_array {\n        use crate::collections::bounded_vec::BoundedVec;\n\n        #[test]\n        fn empty() {\n            let empty_array: [Field; 0] = [];\n            let bounded_vec = BoundedVec::from_array([]);\n\n            assert_eq(bounded_vec.max_len(), 0);\n            assert_eq(bounded_vec.len(), 0);\n            assert_eq(bounded_vec.storage(), empty_array);\n        }\n\n        #[test]\n        fn equal_len() {\n            let array = [1, 2, 3];\n            let bounded_vec = BoundedVec::from_array(array);\n\n            assert_eq(bounded_vec.max_len(), 3);\n            assert_eq(bounded_vec.len(), 3);\n            assert_eq(bounded_vec.storage(), array);\n        }\n\n        #[test]\n        fn max_len_greater_then_array_len() {\n            let array = [1, 2, 3];\n            let bounded_vec: BoundedVec<Field, 10> = BoundedVec::from_array(array);\n\n            assert_eq(bounded_vec.max_len(), 10);\n            assert_eq(bounded_vec.len(), 3);\n            assert_eq(bounded_vec.storage()[0], 1);\n            assert_eq(bounded_vec.storage()[1], 2);\n            assert_eq(bounded_vec.storage()[2], 3);\n        }\n\n        #[test(should_fail_with=\"from array out of bounds\")]\n        fn max_len_lower_then_array_len() {\n            let _: BoundedVec<Field, 2> = BoundedVec::from_array([0; 3]);\n        }\n    }\n\n    mod trait_from {\n        use crate::collections::bounded_vec::BoundedVec;\n\n        #[test]\n        fn simple() {\n            let array = [1, 2];\n            let bounded_vec: BoundedVec<Field, 10> = BoundedVec::from(array);\n\n            assert_eq(bounded_vec.max_len(), 10);\n            assert_eq(bounded_vec.len(), 2);\n            assert_eq(bounded_vec.storage()[0], 1);\n            assert_eq(bounded_vec.storage()[1], 2);\n        }\n    }\n\n    mod trait_eq {\n        use crate::collections::bounded_vec::BoundedVec;\n\n        #[test]\n        fn empty_equality() {\n            let mut bounded_vec1: BoundedVec<Field, 3> = BoundedVec::new();\n            let mut bounded_vec2: BoundedVec<Field, 3> = BoundedVec::new();\n\n            assert_eq(bounded_vec1, bounded_vec2);\n        }\n\n        #[test]\n        fn inequality() {\n            let mut bounded_vec1: BoundedVec<Field, 3> = BoundedVec::new();\n            let mut bounded_vec2: BoundedVec<Field, 3> = BoundedVec::new();\n            bounded_vec1.push(1);\n            bounded_vec2.push(2);\n\n            assert(bounded_vec1 != bounded_vec2);\n        }\n    }\n}\n"},"70":{"path":"/Users/rafi/Projects/aztec-boilerplate-1/frontend-test/src/contracts/src/main.nr","source":"use dep::aztec::macros::aztec;\n\n#[aztec]\ncontract DegenScore {\n    use dep::aztec::{\n        prelude::{AztecAddress, PrivateMutable, Map, NoteInterface},\n        encrypted_logs::encrypted_note_emission::encode_and_encrypt_note_with_keys,\n        macros::{storage::storage, functions::{private, public, initializer}}\n    };\n    use dep::value_note::value_note::ValueNote;\n\n    struct DegenData {\n        trading_volume: Field,\n        leverage_score: Field,\n        yield_farming_score: Field,\n        nft_score: Field,\n        risk_score: Field,\n        token_diversity: Field,\n    }\n\n    #[storage]\n    struct Storage<Context> {\n        degen_scores: Map<AztecAddress, PrivateMutable<ValueNote, Context>, Context>,\n    }\n\n    #[private]\n    #[initializer]\n    fn constructor(owner: AztecAddress) {\n        let degen_scores = storage.degen_scores;\n        let initial_score = 0;\n        let mut initial_note = ValueNote::new(initial_score, owner.to_field());\n        degen_scores.at(owner).initialize(&mut initial_note);\n    }\n\n    #[private]\n    fn update_degen_score(\n        user: AztecAddress,\n        eth_signature: [Field; 65],\n        trading_volume: Field,\n        leverage_score: Field,\n        yield_farming_score: Field,\n        nft_score: Field,\n        risk_score: Field,\n        token_diversity: Field\n    ) {\n        // In a real implementation, we would verify the Ethereum signature here\n        // For this PoC, we'll assume the signature is valid\n\n        let degen_scores = storage.degen_scores;\n        let updated_data = DegenData {\n            trading_volume,\n            leverage_score,\n            yield_farming_score,\n            nft_score,\n            risk_score,\n            token_diversity,\n        };\n        let new_score = calculate_degen_score(updated_data);\n        let mut new_note = ValueNote::new(new_score, user.to_field());\n        degen_scores.at(user).replace(&mut new_note);\n    }\n\n    fn calculate_degen_score(data: DegenData) -> pub Field {\n        // Simplified scoring algorithm\n        data.trading_volume / 1000 +\n        data.leverage_score * 10 +\n        data.yield_farming_score * 5 +\n        data.nft_score * 2 +\n        data.risk_score * 15 +\n        data.token_diversity * 3\n    }\n\n    unconstrained fn get_degen_score(user: AztecAddress) -> pub ValueNote {\n        let degen_scores = storage.degen_scores;\n        degen_scores.at(user).view_note()\n    }\n}"},"75":{"path":"/Users/rafi/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.56.0/noir-projects/aztec-nr/aztec/src/note/lifecycle.nr","source":"use crate::context::{PrivateContext, PublicContext};\nuse crate::note::{\n    note_header::NoteHeader, note_interface::{NoteInterface, NullifiableNote},\n    utils::{compute_note_hash_for_read_request, compute_note_hash_for_nullify_internal},\n    note_emission::NoteEmission\n};\nuse crate::oracle::notes::{notify_created_note, notify_nullified_note};\n\npub fn create_note<Note, let N: u32>(\n    context: &mut PrivateContext,\n    storage_slot: Field,\n    note: &mut Note\n) -> NoteEmission<Note> where Note: NoteInterface<N> + NullifiableNote {\n    let contract_address = (*context).this_address();\n    let note_hash_counter = context.side_effect_counter;\n\n    let header = NoteHeader { contract_address, storage_slot, nonce: 0, note_hash_counter };\n    note.set_header(header);\n    let note_hash = note.compute_note_hash();\n\n    let serialized_note = Note::serialize_content(*note);\n    assert(\n        notify_created_note(\n        storage_slot,\n        Note::get_note_type_id(),\n        serialized_note,\n        note_hash,\n        note_hash_counter\n    )\n        == 0\n    );\n\n    context.push_note_hash(note_hash);\n\n    NoteEmission::new(*note)\n}\n\npub fn create_note_hash_from_public<Note, let N: u32>(\n    context: &mut PublicContext,\n    storage_slot: Field,\n    note: &mut Note\n) where Note: NoteInterface<N> + NullifiableNote {\n    let contract_address = (*context).this_address();\n    // Public note hashes are transient, but have no side effect counters, so we just need note_hash_counter != 0\n    let header = NoteHeader { contract_address, storage_slot, nonce: 0, note_hash_counter: 1 };\n    note.set_header(header);\n    let note_hash = note.compute_note_hash();\n\n    context.push_note_hash(note_hash);\n}\n\n// Note: This function is currently totally unused.\npub fn destroy_note<Note, let N: u32>(\n    context: &mut PrivateContext,\n    note: Note\n) where Note: NoteInterface<N> + NullifiableNote {\n    let note_hash_for_read_request = compute_note_hash_for_read_request(note);\n\n    destroy_note_unsafe(context, note, note_hash_for_read_request)\n}\n\npub fn destroy_note_unsafe<Note, let N: u32>(\n    context: &mut PrivateContext,\n    note: Note,\n    note_hash_for_read_request: Field\n) where Note: NoteInterface<N> + NullifiableNote {\n    let note_hash_for_nullify = compute_note_hash_for_nullify_internal(note, note_hash_for_read_request);\n    let nullifier = note.compute_nullifier(context, note_hash_for_nullify);\n\n    let note_hash_counter = note.get_header().note_hash_counter;\n    let notification_note_hash = if (note_hash_counter == 0) {\n        // Counter is zero, so we're nullifying a settled note and we don't populate the note_hash with real value.\n        0\n    } else {\n        // A non-zero note hash counter implies that we're nullifying a pending note (i.e. one that has not yet been\n        // persisted in the trees and is instead in the pending new note hashes array). In such a case we populate its\n        // hash with real value to inform the kernel which note we're nullifyng so that it can either squash both\n        // the note and the nullifier if it's an inner note hash, or check that the it matches a pending note if it's\n        // a siloed note hash.\n        note_hash_for_nullify\n    };\n\n    let nullifier_counter = context.side_effect_counter;\n    assert(notify_nullified_note(nullifier, notification_note_hash, nullifier_counter) == 0);\n\n    context.push_nullifier_for_note_hash(nullifier, notification_note_hash)\n}\n\n"},"76":{"path":"/Users/rafi/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.56.0/noir-projects/aztec-nr/aztec/src/note/utils.nr","source":"use crate::{\n    context::PrivateContext,\n    note::{note_header::NoteHeader, note_interface::{NullifiableNote, NoteInterface}}\n};\n\nuse dep::protocol_types::{\n    hash::{\n    compute_unique_note_hash, compute_siloed_note_hash as compute_siloed_note_hash,\n    compute_siloed_nullifier as compute_siloed_nullifier_from_preimage\n},\n    utils::arr_copy_slice\n};\n\npub fn compute_siloed_nullifier<Note, let N: u32>(\n    note_with_header: Note,\n    context: &mut PrivateContext\n) -> Field where Note: NoteInterface<N> + NullifiableNote {\n    let header = note_with_header.get_header();\n    let note_hash_for_nullify = compute_note_hash_for_nullify(note_with_header);\n    let inner_nullifier = note_with_header.compute_nullifier(context, note_hash_for_nullify);\n\n    compute_siloed_nullifier_from_preimage(header.contract_address, inner_nullifier)\n}\n\n// TODO(#7775): make this not impossible to understand\npub fn compute_note_hash_for_read_request<Note, let N: u32>(note: Note) -> Field where Note: NoteInterface<N> + NullifiableNote {\n    let note_hash = note.compute_note_hash();\n    let nonce = note.get_header().nonce;\n    let counter = note.get_header().note_hash_counter;\n\n    if counter != 0 {\n        note_hash\n    } else {\n        compute_unique_note_hash(nonce, note_hash)\n    }\n}\n\n// TODO(#7775): make this not impossible to understand\npub fn compute_note_hash_for_nullify_internal<Note, let N: u32>(\n    note: Note,\n    note_hash_for_read_request: Field\n) -> Field where Note: NoteInterface<N> + NullifiableNote {\n    let header = note.get_header();\n\n    if header.note_hash_counter != 0 {\n        if header.nonce == 0 {\n            // Case 1: Transient note\n            note_hash_for_read_request\n        } else {\n            // Case 2: Non-revertible note, nullified by a revertible nullifier\n            let unique_note_hash = compute_unique_note_hash(header.nonce, note_hash_for_read_request);\n            compute_siloed_note_hash(header.contract_address, unique_note_hash)\n        }\n    } else {\n        // Case 3: Note from a previous transaction\n        // note_hash_for_read_request is already the unique_note_hash in this case\n        compute_siloed_note_hash(header.contract_address, note_hash_for_read_request)\n    }\n}\n\n// TODO(#7775): nuke this commented out code - kept it around as it contains comments which might be helpful when tackling #7775\n// pub fn compute_note_hash_for_nullify<Note, let N: u32, let M: u32>(note: Note) -> Field where Note: NoteInterface<N> {\n//     let header = note.get_header();\n//     // There are 3 cases for reading a note intended for consumption:\n//     // 1. The note was inserted in this transaction, is revertible, or is not nullified by a revertible nullifier in\n//     //    the same transaction: (note_hash_counter != 0) & (nonce == 0)\n//     // 2. The note was inserted in this transaction, is non-revertible, and is nullified by a revertible nullifier in\n//     //    the same transaction: (note_hash_counter != 0) & (nonce != 0)\n//     // 3. The note was inserted in a previous transaction: (note_hash_counter == 0) & (nonce != 0)\n\n//     let note_hash = note.compute_note_hiding_point().x;\n\n//     if header.nonce == 0 {\n//         // Case 1.\n//         // If a note is transient, we just read the note_hash (kernel will hash it with nonce and silo by contract address).\n//         note_hash\n//     } else {\n//         // Case 2: If a note is non-revertible, and is nullified by a revertible nullifier, we cannot squash them in the\n//         // private reset circuit. Because if the tx reverts, we will have to keep the note hash and throw away the\n//         // nullifier.\n//         // And if the tx does not revert, both will be emitted. In which case, the nullifier must be created in the app\n//         // from the siloed note hash.\n//         // The kernel circuit will check that a nullifier with non-zero note_nonce is linked to a note hash, whose\n//         // siloed note hash matches the note hash specified in the nullifier.\n\n//         // Case 3: If a note is not from the current transaction, that means we are reading a settled note (from\n//         // tree) created in a previous TX. So we need the siloed_note_hash which has already been hashed with\n//         // nonce and then contract address. This hash will match the existing leaf in the note hash\n//         // tree, so the kernel can just perform a membership check directly on this hash/leaf.\n//         let unique_note_hash = compute_unique_note_hash(header.nonce, note_hash);\n//         compute_siloed_note_hash(header.contract_address, unique_note_hash)\n//         // IMPORTANT NOTE ON REDUNDANT SILOING BY CONTRACT ADDRESS: The note hash computed above is\n//         // \"siloed\" by contract address. When a note hash is computed solely for the purpose of\n//         // nullification, it is not strictly necessary to silo the note hash before computing\n//         // its nullifier. In other words, it is NOT NECESSARY for protocol security that a nullifier\n//         // be computed from a siloed note hash. After all, persistable note hashes and nullifiers are\n//         // siloed by the kernel circuit. That being said, the siloed note hash computed above CAN be\n//         // used for nullifier computation, and this achieves the (arguably unnecessary) property that\n//         // nullifiers are computed from a note hash's fully-computed note hash tree leaf.\n//     }\n// }\n\npub fn compute_note_hash_for_nullify<Note, let N: u32>(note: Note) -> Field where Note: NoteInterface<N> + NullifiableNote {\n    let note_hash_for_read_request = compute_note_hash_for_read_request(note);\n    compute_note_hash_for_nullify_internal(note, note_hash_for_read_request)\n}\n\npub fn compute_note_hash_and_optionally_a_nullifier<T, let N: u32, let S: u32>(\n    deserialize_content: fn([Field; N]) -> T,\n    note_header: NoteHeader,\n    compute_nullifier: bool,\n    serialized_note: [Field; S]\n) -> [Field; 4] where T: NoteInterface<N> + NullifiableNote {\n    let mut note = deserialize_content(arr_copy_slice(serialized_note, [0; N], 0));\n    note.set_header(note_header);\n\n    let note_hash = note.compute_note_hash();\n    let unique_note_hash = compute_unique_note_hash(note_header.nonce, note_hash);\n    let siloed_note_hash = compute_siloed_note_hash(note_header.contract_address, unique_note_hash);\n\n    let inner_nullifier = if compute_nullifier {\n        note.compute_nullifier_without_context()\n    } else {\n        0\n    };\n    // docs:start:compute_note_hash_and_optionally_a_nullifier_returns\n    [note_hash, unique_note_hash, siloed_note_hash, inner_nullifier]\n    // docs:end:compute_note_hash_and_optionally_a_nullifier_returns\n}\n"},"78":{"path":"/Users/rafi/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.56.0/noir-projects/aztec-nr/aztec/src/note/note_getter/mod.nr","source":"use dep::protocol_types::{constants::{MAX_NOTE_HASH_READ_REQUESTS_PER_CALL, GET_NOTES_ORACLE_RETURN_LENGTH}};\nuse crate::context::PrivateContext;\nuse crate::note::{\n    constants::{GET_NOTE_ORACLE_RETURN_LENGTH, VIEW_NOTE_ORACLE_RETURN_LENGTH},\n    note_getter_options::{NoteGetterOptions, Select, Sort, SortOrder, NoteStatus, PropertySelector},\n    note_interface::{NoteInterface, NullifiableNote}, note_viewer_options::NoteViewerOptions,\n    utils::compute_note_hash_for_read_request\n};\nuse crate::oracle;\nuse crate::utils::comparison::compare;\n\npub use crate::note::constants::MAX_NOTES_PER_PAGE;\n\nmod test;\n\nfn extract_property_value_from_selector<let N: u32>(\n    serialized_note: [Field; N],\n    selector: PropertySelector\n) -> Field {\n    // Selectors use PropertySelectors in order to locate note properties inside the serialized note.\n    // This allows easier packing and custom (de)serialization schemas. A note property is located\n    // inside the serialized note using the index inside the array, a byte offset and a length.\n    let value: [u8; 32] = serialized_note[selector.index].to_be_bytes();\n    let offset = selector.offset;\n    let length = selector.length;\n    let mut value_field = 0 as Field;\n    let mut acc: Field = 1;\n    for i in 0..32 {\n        if i < length {\n            value_field += value[31 + offset - i] as Field * acc;\n            acc = acc * 256;\n        }\n    }\n    value_field\n}\n\nfn check_note_header<Note, let N: u32>(\n    context: PrivateContext,\n    storage_slot: Field,\n    note: Note\n) where Note: NoteInterface<N> {\n    let header = note.get_header();\n    let contract_address = context.this_address();\n    assert(header.contract_address.eq(contract_address), \"Mismatch note header contract address.\");\n    assert(header.storage_slot == storage_slot, \"Mismatch note header storage slot.\");\n}\n\nfn check_note_fields<let N: u32>(\n    serialized_note: [Field; N],\n    selects: BoundedVec<Option<Select>, N>\n) {\n    for i in 0..selects.len {\n        let select = selects.get_unchecked(i).unwrap_unchecked();\n        let value_field = extract_property_value_from_selector(serialized_note, select.property_selector);\n\n        assert(\n            compare(value_field, select.comparator, select.value.to_field()), \"Mismatch return note field.\"\n        );\n    }\n}\n\nfn check_notes_order<let N: u32>(\n    fields_0: [Field; N],\n    fields_1: [Field; N],\n    sorts: BoundedVec<Option<Sort>, N>\n) {\n    for i in 0..sorts.len {\n        let sort = sorts.get_unchecked(i).unwrap_unchecked();\n        let field_0 = extract_property_value_from_selector(fields_0, sort.property_selector);\n        let field_1 = extract_property_value_from_selector(fields_1, sort.property_selector);\n        let eq = field_0 == field_1;\n        let lt = field_0.lt(field_1);\n        if sort.order == SortOrder.ASC {\n            assert(eq | lt, \"Return notes not sorted in ascending order.\");\n        } else if !eq {\n            assert(!lt, \"Return notes not sorted in descending order.\");\n        }\n    }\n}\n\npub fn get_note<Note, let N: u32>(\n    context: &mut PrivateContext,\n    storage_slot: Field\n) -> (Note, Field) where Note: NoteInterface<N> + NullifiableNote {\n    let note = unsafe {\n        get_note_internal(storage_slot)\n    };\n\n    // Constraining that we got a valid note from the oracle is fairly straightforward: all we need to do is check that\n    // the metadata is correct, and that the note exists.\n    check_note_header(*context, storage_slot, note);\n\n    let note_hash_for_read_request = compute_note_hash_for_read_request(note);\n    context.push_note_hash_read_request(note_hash_for_read_request);\n\n    (note, note_hash_for_read_request)\n}\n\npub fn get_notes<Note, let N: u32, PREPROCESSOR_ARGS, FILTER_ARGS>(\n    context: &mut PrivateContext,\n    storage_slot: Field,\n    options: NoteGetterOptions<Note, N, PREPROCESSOR_ARGS, FILTER_ARGS>\n) -> (BoundedVec<Note, MAX_NOTE_HASH_READ_REQUESTS_PER_CALL>, BoundedVec<Field, MAX_NOTE_HASH_READ_REQUESTS_PER_CALL>) where Note: NoteInterface<N> + NullifiableNote + Eq {\n    let opt_notes = unsafe {\n        get_notes_internal(storage_slot, options)\n    };\n\n    // We apply the constraints in a separate function instead of inlining them here to make it easier to test that\n    // these checks correctly reject bad notes.\n    constrain_get_notes_internal(context, storage_slot, opt_notes, options)\n}\n\nunconstrained fn apply_preprocessor<Note, PREPROCESSOR_ARGS>(\n    notes: [Option<Note>; MAX_NOTE_HASH_READ_REQUESTS_PER_CALL],\n    preprocessor: fn([Option<Note>; MAX_NOTE_HASH_READ_REQUESTS_PER_CALL], PREPROCESSOR_ARGS) -> [Option<Note>; MAX_NOTE_HASH_READ_REQUESTS_PER_CALL],\n    preprocessor_args: PREPROCESSOR_ARGS\n) -> [Option<Note>; MAX_NOTE_HASH_READ_REQUESTS_PER_CALL] {\n    preprocessor(notes, preprocessor_args)\n}\n\nfn constrain_get_notes_internal<Note, let N: u32, PREPROCESSOR_ARGS, FILTER_ARGS>(\n    context: &mut PrivateContext,\n    storage_slot: Field,\n    opt_notes: [Option<Note>; MAX_NOTE_HASH_READ_REQUESTS_PER_CALL],\n    options: NoteGetterOptions<Note, N, PREPROCESSOR_ARGS, FILTER_ARGS>\n) -> (BoundedVec<Note, MAX_NOTE_HASH_READ_REQUESTS_PER_CALL>, BoundedVec<Field, MAX_NOTE_HASH_READ_REQUESTS_PER_CALL>) where Note: NoteInterface<N> + NullifiableNote + Eq {\n    // The filter is applied first to avoid pushing note read requests for notes we're not interested in. Note that\n    // while the filter function can technically mutate the contents of the notes (as opposed to simply removing some),\n    // the private kernel will later validate that these note actually exist, so transformations would cause for that\n    // check to fail.\n    let filter_fn = options.filter;\n    let filter_args = options.filter_args;\n    let filtered_notes = filter_fn(opt_notes, filter_args);\n\n    let notes = crate::utils::collapse_array(filtered_notes);\n    let mut note_hashes: BoundedVec<Field, MAX_NOTE_HASH_READ_REQUESTS_PER_CALL> = BoundedVec::new();\n\n    // We have now collapsed the sparse array of Options into a BoundedVec. This is a more ergonomic type and also\n    // results in reduced gate counts when setting a limit value, since we guarantee that the limit is an upper bound\n    // for the runtime length, and can therefore have fewer loop iterations.\n    assert(notes.len() <= options.limit, \"Got more notes than limit.\");\n\n    let mut prev_fields = [0; N];\n    for i in 0..options.limit {\n        if i < notes.len() {\n            let note = notes.get_unchecked(i);\n            let fields = note.serialize_content();\n            check_note_header(*context, storage_slot, note);\n            check_note_fields(fields, options.selects);\n            if i != 0 {\n                check_notes_order(prev_fields, fields, options.sorts);\n            }\n            prev_fields = fields;\n\n            let note_hash_for_read_request = compute_note_hash_for_read_request(note);\n            // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1410): test to ensure\n            // failure if malicious oracle injects 0 nonce here for a \"pre-existing\" note.\n            context.push_note_hash_read_request(note_hash_for_read_request);\n            note_hashes.push(note_hash_for_read_request);\n        };\n    }\n\n    (notes, note_hashes)\n}\n\nunconstrained fn get_note_internal<Note, let N: u32>(storage_slot: Field) -> Note where Note: NoteInterface<N> {\n    let placeholder_note = [Option::none()];\n    let placeholder_fields = [0; GET_NOTE_ORACLE_RETURN_LENGTH];\n    let placeholder_note_length = [0; N];\n    oracle::notes::get_notes(\n        storage_slot,\n        0,\n        [],\n        [],\n        [],\n        [],\n        [],\n        [],\n        [],\n        [],\n        [],\n        1, // limit\n        0, // offset\n        NoteStatus.ACTIVE,\n        placeholder_note,\n        placeholder_fields,\n        placeholder_note_length\n    )[0].expect(f\"Failed to get a note\") // Notice: we don't allow dummies to be returned from get_note (singular).\n}\n\nunconstrained fn get_notes_internal<Note, let N: u32, PREPROCESSOR_ARGS, FILTER_ARGS>(\n    storage_slot: Field,\n    options: NoteGetterOptions<Note, N, PREPROCESSOR_ARGS, FILTER_ARGS>\n) -> [Option<Note>; MAX_NOTE_HASH_READ_REQUESTS_PER_CALL] where Note: NoteInterface<N> {\n    // This function simply performs some transformations from NoteGetterOptions into the types required by the oracle.\n\n    let (num_selects, select_by_indexes, select_by_offsets, select_by_lengths, select_values, select_comparators, sort_by_indexes, sort_by_offsets, sort_by_lengths, sort_order) = flatten_options(options.selects, options.sorts);\n    let placeholder_opt_notes = [Option::none(); MAX_NOTE_HASH_READ_REQUESTS_PER_CALL];\n    let placeholder_fields = [0; GET_NOTES_ORACLE_RETURN_LENGTH];\n    let placeholder_note_length = [0; N];\n\n    let opt_notes = oracle::notes::get_notes(\n        storage_slot,\n        num_selects,\n        select_by_indexes,\n        select_by_offsets,\n        select_by_lengths,\n        select_values,\n        select_comparators,\n        sort_by_indexes,\n        sort_by_offsets,\n        sort_by_lengths,\n        sort_order,\n        options.limit,\n        options.offset,\n        options.status,\n        placeholder_opt_notes,\n        placeholder_fields,\n        placeholder_note_length\n    );\n\n    apply_preprocessor(opt_notes, options.preprocessor, options.preprocessor_args)\n}\n\nunconstrained pub fn view_notes<Note, let N: u32>(\n    storage_slot: Field,\n    options: NoteViewerOptions<Note, N>\n) -> BoundedVec<Note, MAX_NOTES_PER_PAGE> where Note: NoteInterface<N> {\n    let (num_selects, select_by_indexes, select_by_offsets, select_by_lengths, select_values, select_comparators, sort_by_indexes, sort_by_offsets, sort_by_lengths, sort_order) = flatten_options(options.selects, options.sorts);\n    let placeholder_opt_notes = [Option::none(); MAX_NOTES_PER_PAGE];\n    let placeholder_fields = [0; VIEW_NOTE_ORACLE_RETURN_LENGTH];\n    let placeholder_note_length = [0; N];\n\n    let notes_array = oracle::notes::get_notes(\n        storage_slot,\n        num_selects,\n        select_by_indexes,\n        select_by_offsets,\n        select_by_lengths,\n        select_values,\n        select_comparators,\n        sort_by_indexes,\n        sort_by_offsets,\n        sort_by_lengths,\n        sort_order,\n        options.limit,\n        options.offset,\n        options.status,\n        placeholder_opt_notes,\n        placeholder_fields,\n        placeholder_note_length\n    );\n\n    let mut notes = BoundedVec::new();\n    for i in 0..notes_array.len() {\n        if notes_array[i].is_some() {\n            notes.push(notes_array[i].unwrap_unchecked());\n        }\n    }\n\n    notes\n}\n\nunconstrained fn flatten_options<let N: u32>(\n    selects: BoundedVec<Option<Select>, N>,\n    sorts: BoundedVec<Option<Sort>, N>\n) -> (u8, [u8; N], [u8; N], [u8; N], [Field; N], [u8; N], [u8; N], [u8; N], [u8; N], [u8; N]) {\n    let mut num_selects = 0;\n    let mut select_by_indexes = [0; N];\n    let mut select_by_offsets = [0; N];\n    let mut select_by_lengths = [0; N];\n    let mut select_values = [0; N];\n    let mut select_comparators = [0; N];\n\n    for i in 0..selects.len {\n        let select = selects.get(i);\n        if select.is_some() {\n            select_by_indexes[num_selects] = select.unwrap_unchecked().property_selector.index;\n            select_by_offsets[num_selects] = select.unwrap_unchecked().property_selector.offset;\n            select_by_lengths[num_selects] = select.unwrap_unchecked().property_selector.length;\n            select_values[num_selects] = select.unwrap_unchecked().value;\n            select_comparators[num_selects] = select.unwrap_unchecked().comparator;\n            num_selects += 1;\n        };\n    }\n\n    let mut sort_by_indexes = [0; N];\n    let mut sort_by_offsets = [0; N];\n    let mut sort_by_lengths = [0; N];\n    let mut sort_order = [0; N];\n    for i in 0..sorts.len {\n        let sort = sorts.get(i);\n        if sort.is_some() {\n            sort_by_indexes[i] = sort.unwrap_unchecked().property_selector.index;\n            sort_by_offsets[i] = sort.unwrap_unchecked().property_selector.offset;\n            sort_by_lengths[i] = sort.unwrap_unchecked().property_selector.length;\n            sort_order[i] = sort.unwrap_unchecked().order;\n        };\n    }\n\n    (\n        num_selects, select_by_indexes, select_by_offsets, select_by_lengths, select_values, select_comparators, sort_by_indexes, sort_by_offsets, sort_by_lengths, sort_order\n    )\n}\n"},"90":{"path":"/Users/rafi/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.56.0/noir-projects/aztec-nr/aztec/src/context/unconstrained_context.nr","source":"use dep::protocol_types::{address::AztecAddress, traits::Deserialize};\nuse crate::oracle::{execution::{get_chain_id, get_version, get_contract_address, get_block_number}, storage::storage_read};\n\npub struct UnconstrainedContext {\n    block_number: u32,\n    contract_address: AztecAddress,\n    version: Field,\n    chain_id: Field,\n}\n\nimpl UnconstrainedContext {\n    unconstrained fn new() -> Self {\n        // We could call these oracles on the getters instead of at creation, which makes sense given that they might\n        // not even be accessed. However any performance gains are minimal, and we'd rather fail early if a user\n        // incorrectly attempts to create an UnconstrainedContext in an environment in which these oracles are not\n        // available.\n        let block_number = get_block_number();\n        let contract_address = get_contract_address();\n        let chain_id = get_chain_id();\n        let version = get_version();\n        Self { block_number, contract_address, version, chain_id }\n    }\n\n    unconstrained fn at(contract_address: AztecAddress) -> Self {\n        let block_number = get_block_number();\n        let chain_id = get_chain_id();\n        let version = get_version();\n        Self { block_number, contract_address, version, chain_id }\n    }\n\n    unconstrained fn at_historical(contract_address: AztecAddress, block_number: u32) -> Self {\n        let chain_id = get_chain_id();\n        let version = get_version();\n        Self { block_number, contract_address, version, chain_id }\n    }\n\n    fn block_number(self) -> u32 {\n        self.block_number\n    }\n\n    fn this_address(self) -> AztecAddress {\n        self.contract_address\n    }\n\n    fn version(self) -> Field {\n        self.version\n    }\n\n    fn chain_id(self) -> Field {\n        self.chain_id\n    }\n\n    unconstrained fn raw_storage_read<let N: u32>(self: Self, storage_slot: Field) -> [Field; N] {\n        storage_read(self.this_address(), storage_slot, self.block_number())\n    }\n\n    unconstrained fn storage_read<T, let N: u32>(\n        self,\n        storage_slot: Field\n    ) -> T where T: Deserialize<N> {\n        T::deserialize(self.raw_storage_read(storage_slot))\n    }\n}\n"},"92":{"path":"/Users/rafi/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.56.0/noir-projects/aztec-nr/aztec/src/context/private_context.nr","source":"use crate::{\n    context::{inputs::PrivateContextInputs, packed_returns::PackedReturns},\n    messaging::process_l1_to_l2_message, hash::{hash_args_array, ArgsHasher},\n    keys::constants::{NULLIFIER_INDEX, OUTGOING_INDEX, NUM_KEY_TYPES, sk_generators},\n    oracle::{\n    key_validation_request::get_key_validation_request, arguments, returns::pack_returns,\n    call_private_function::call_private_function_internal, header::get_header_at,\n    logs::{emit_encrypted_note_log, emit_encrypted_event_log},\n    enqueue_public_function_call::{\n    enqueue_public_function_call_internal, notify_set_min_revertible_side_effect_counter,\n    set_public_teardown_function_call_internal\n}\n}\n};\nuse dep::protocol_types::{\n    abis::{\n    call_context::CallContext, function_selector::FunctionSelector, max_block_number::MaxBlockNumber,\n    validation_requests::{KeyValidationRequest, KeyValidationRequestAndGenerator},\n    private_call_request::PrivateCallRequest, private_circuit_public_inputs::PrivateCircuitPublicInputs,\n    public_call_request::PublicCallRequest, read_request::ReadRequest, note_hash::NoteHash,\n    nullifier::Nullifier, log_hash::{LogHash, NoteLogHash, EncryptedLogHash}\n},\n    address::{AztecAddress, EthAddress},\n    constants::{\n    MAX_NOTE_HASHES_PER_CALL, MAX_L2_TO_L1_MSGS_PER_CALL, MAX_NULLIFIERS_PER_CALL,\n    MAX_PRIVATE_CALL_STACK_LENGTH_PER_CALL, MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL,\n    MAX_NOTE_HASH_READ_REQUESTS_PER_CALL, MAX_NULLIFIER_READ_REQUESTS_PER_CALL,\n    MAX_KEY_VALIDATION_REQUESTS_PER_CALL, MAX_ENCRYPTED_LOGS_PER_CALL, MAX_UNENCRYPTED_LOGS_PER_CALL,\n    MAX_NOTE_ENCRYPTED_LOGS_PER_CALL\n},\n    header::Header, messaging::l2_to_l1_message::L2ToL1Message, traits::Empty\n};\n\n// When finished, one can call .finish() to convert back to the abi\npub struct PrivateContext {\n    // docs:start:private-context\n    inputs: PrivateContextInputs,\n    side_effect_counter: u32,\n\n    min_revertible_side_effect_counter: u32,\n    is_fee_payer: bool,\n\n    args_hash: Field,\n    return_hash: Field,\n\n    max_block_number: MaxBlockNumber,\n\n    note_hash_read_requests: BoundedVec<ReadRequest, MAX_NOTE_HASH_READ_REQUESTS_PER_CALL>,\n    nullifier_read_requests: BoundedVec<ReadRequest, MAX_NULLIFIER_READ_REQUESTS_PER_CALL>,\n    key_validation_requests_and_generators: BoundedVec<KeyValidationRequestAndGenerator, MAX_KEY_VALIDATION_REQUESTS_PER_CALL>,\n\n    note_hashes: BoundedVec<NoteHash, MAX_NOTE_HASHES_PER_CALL>,\n    nullifiers: BoundedVec<Nullifier, MAX_NULLIFIERS_PER_CALL>,\n\n    private_call_requests : BoundedVec<PrivateCallRequest, MAX_PRIVATE_CALL_STACK_LENGTH_PER_CALL>,\n    public_call_requests : BoundedVec<PublicCallRequest, MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL>,\n    public_teardown_call_request: PublicCallRequest,\n    l2_to_l1_msgs : BoundedVec<L2ToL1Message, MAX_L2_TO_L1_MSGS_PER_CALL>,\n    // docs:end:private-context\n\n    // Header of a block whose state is used during private execution (not the block the transaction is included in).\n    historical_header: Header,\n\n    note_encrypted_logs_hashes: BoundedVec<NoteLogHash, MAX_NOTE_ENCRYPTED_LOGS_PER_CALL>,\n    encrypted_logs_hashes: BoundedVec<EncryptedLogHash, MAX_ENCRYPTED_LOGS_PER_CALL>,\n    unencrypted_logs_hashes: BoundedVec<LogHash, MAX_UNENCRYPTED_LOGS_PER_CALL>,\n\n    // Contains the last key validation request for each key type. This is used to cache the last request and avoid\n    // fetching the same request multiple times.\n    // The index of the array corresponds to the key type (0 nullifier, 1 incoming, 2 outgoing, 3 tagging).\n    last_key_validation_requests: [Option<KeyValidationRequest>; NUM_KEY_TYPES],\n}\n\nimpl PrivateContext {\n    pub fn new(inputs: PrivateContextInputs, args_hash: Field) -> PrivateContext {\n        PrivateContext {\n            inputs,\n            side_effect_counter: inputs.start_side_effect_counter + 1,\n            min_revertible_side_effect_counter: 0,\n            is_fee_payer: false,\n            args_hash,\n            return_hash: 0,\n            max_block_number: MaxBlockNumber::empty(),\n            note_hash_read_requests: BoundedVec::new(),\n            nullifier_read_requests: BoundedVec::new(),\n            key_validation_requests_and_generators: BoundedVec::new(),\n            note_hashes: BoundedVec::new(),\n            nullifiers: BoundedVec::new(),\n            historical_header: inputs.historical_header,\n            private_call_requests: BoundedVec::new(),\n            public_call_requests: BoundedVec::new(),\n            public_teardown_call_request: PublicCallRequest::empty(),\n            l2_to_l1_msgs: BoundedVec::new(),\n            note_encrypted_logs_hashes: BoundedVec::new(),\n            encrypted_logs_hashes: BoundedVec::new(),\n            unencrypted_logs_hashes: BoundedVec::new(),\n            last_key_validation_requests: [Option::none(); NUM_KEY_TYPES]\n        }\n    }\n\n    fn msg_sender(self) -> AztecAddress {\n        self.inputs.call_context.msg_sender\n    }\n\n    fn this_address(self) -> AztecAddress {\n        self.inputs.call_context.storage_contract_address\n    }\n\n    fn chain_id(self) -> Field {\n        self.inputs.tx_context.chain_id\n    }\n\n    fn version(self) -> Field {\n        self.inputs.tx_context.version\n    }\n\n    fn selector(self) -> FunctionSelector {\n        self.inputs.call_context.function_selector\n    }\n\n    fn get_args_hash(self) -> Field {\n        self.args_hash\n    }\n\n    fn push_note_hash(&mut self, note_hash: Field) {\n        self.note_hashes.push(NoteHash { value: note_hash, counter: self.next_counter() });\n    }\n\n    fn push_nullifier(&mut self, nullifier: Field) {\n        self.nullifiers.push(Nullifier { value: nullifier, note_hash: 0, counter: self.next_counter() });\n    }\n\n    fn push_nullifier_for_note_hash(&mut self, nullifier: Field, nullified_note_hash: Field) {\n        self.nullifiers.push(Nullifier { value: nullifier, note_hash: nullified_note_hash, counter: self.next_counter() });\n    }\n\n    // Returns the header of a block whose state is used during private execution (not the block the transaction is\n    // included in).\n    fn get_header(self) -> Header {\n        self.historical_header\n    }\n\n    // Returns the header of an arbitrary block whose block number is less than or equal to the block number\n    // of historical header.\n    pub fn get_header_at(self, block_number: u32) -> Header {\n        get_header_at(block_number, self)\n    }\n\n    pub fn set_return_hash(&mut self, returns_hasher: ArgsHasher) {\n        pack_returns(returns_hasher.fields);\n        self.return_hash = returns_hasher.hash();\n    }\n\n    pub fn finish(self) -> PrivateCircuitPublicInputs {\n        PrivateCircuitPublicInputs {\n            call_context: self.inputs.call_context,\n            args_hash: self.args_hash,\n            returns_hash: self.return_hash,\n            min_revertible_side_effect_counter: self.min_revertible_side_effect_counter,\n            is_fee_payer: self.is_fee_payer,\n            max_block_number: self.max_block_number,\n            note_hash_read_requests: self.note_hash_read_requests.storage,\n            nullifier_read_requests: self.nullifier_read_requests.storage,\n            key_validation_requests_and_generators: self.key_validation_requests_and_generators.storage,\n            note_hashes: self.note_hashes.storage,\n            nullifiers: self.nullifiers.storage,\n            private_call_requests: self.private_call_requests.storage,\n            public_call_requests: self.public_call_requests.storage,\n            public_teardown_call_request: self.public_teardown_call_request,\n            l2_to_l1_msgs: self.l2_to_l1_msgs.storage,\n            start_side_effect_counter: self.inputs.start_side_effect_counter,\n            end_side_effect_counter: self.side_effect_counter,\n            note_encrypted_logs_hashes: self.note_encrypted_logs_hashes.storage,\n            encrypted_logs_hashes: self.encrypted_logs_hashes.storage,\n            unencrypted_logs_hashes: self.unencrypted_logs_hashes.storage,\n            historical_header: self.historical_header,\n            tx_context: self.inputs.tx_context\n        }\n    }\n\n    pub fn set_as_fee_payer(&mut self) {\n        dep::protocol_types::debug_log::debug_log_format(\"Setting {0} as fee payer\", [self.this_address().to_field()]);\n        self.is_fee_payer = true;\n    }\n\n    pub fn end_setup(&mut self) {\n        // dep::protocol_types::debug_log::debug_log_format(\n        //     \"Ending setup at counter {0}\",\n        //     [self.side_effect_counter as Field]\n        // );\n        self.min_revertible_side_effect_counter = self.side_effect_counter;\n        notify_set_min_revertible_side_effect_counter(self.min_revertible_side_effect_counter);\n    }\n\n    // docs:start:max-block-number\n    pub fn set_tx_max_block_number(&mut self, max_block_number: u32) {\n        // docs:end:max-block-number\n        self.max_block_number = MaxBlockNumber::min_with_u32(self.max_block_number, max_block_number);\n    }\n\n    pub fn push_note_hash_read_request(&mut self, note_hash: Field) {\n        let side_effect = ReadRequest { value: note_hash, counter: self.next_counter() };\n        self.note_hash_read_requests.push(side_effect);\n    }\n\n    pub fn push_nullifier_read_request(&mut self, nullifier: Field) {\n        let request = ReadRequest { value: nullifier, counter: self.next_counter() };\n        self.nullifier_read_requests.push(request);\n    }\n\n    pub fn request_nsk_app(&mut self, npk_m_hash: Field) -> Field {\n        self.request_sk_app(npk_m_hash, NULLIFIER_INDEX)\n    }\n\n    pub fn request_ovsk_app(&mut self, ovpk_m_hash: Field) -> Field {\n        self.request_sk_app(ovpk_m_hash, OUTGOING_INDEX)\n    }\n\n    fn request_sk_app(&mut self, pk_m_hash: Field, key_index: Field) -> Field {\n        let cached_request = self.last_key_validation_requests[key_index].unwrap_or(KeyValidationRequest::empty());\n\n        if cached_request.pk_m.hash() == pk_m_hash {\n            // We get a match so the cached request is the latest one\n            cached_request.sk_app\n        } else {\n            // We didn't get a match meaning the cached result is stale. We fetch new values from oracle and instruct\n            // protocol circuits to validate them by storing the validation request in context.\n            let request = get_key_validation_request(pk_m_hash, key_index);\n            let request_and_generator = KeyValidationRequestAndGenerator { request, sk_app_generator: sk_generators[key_index] };\n            // We constrain that the pk_m_hash matches the one in the request (otherwise we could get an arbitrary\n            // valid key request and not the one corresponding to pk_m_hash).\n            assert(request.pk_m.hash() == pk_m_hash);\n            self.key_validation_requests_and_generators.push(request_and_generator);\n            self.last_key_validation_requests[key_index] = Option::some(request);\n            request.sk_app\n        }\n    }\n\n    // docs:start:context_message_portal\n    pub fn message_portal(&mut self, recipient: EthAddress, content: Field) {\n        // docs:end:context_message_portal\n        let message = L2ToL1Message { recipient, content, counter: self.next_counter() };\n        self.l2_to_l1_msgs.push(message);\n    }\n\n    // docs:start:context_consume_l1_to_l2_message\n    // docs:start:consume_l1_to_l2_message\n    pub fn consume_l1_to_l2_message(&mut self, content: Field, secret: Field, sender: EthAddress) {\n        // docs:end:context_consume_l1_to_l2_message\n        let nullifier = process_l1_to_l2_message(\n            self.historical_header.state.l1_to_l2_message_tree.root,\n            self.this_address(),\n            sender,\n            self.chain_id(),\n            self.version(),\n            content,\n            secret\n        );\n\n        // Push nullifier (and the \"commitment\" corresponding to this can be \"empty\")\n        self.push_nullifier(nullifier)\n    }\n    // docs:end:consume_l1_to_l2_message\n\n    // NB: A randomness value of 0 signals that the kernels should not mask the contract address\n    // used in siloing later on e.g. 'handshaking' contract w/ known address.\n    pub fn emit_raw_event_log_with_masked_address<let M: u32>(\n        &mut self,\n        randomness: Field,\n        log: [u8; M],\n        log_hash: Field\n    ) {\n        let counter = self.next_counter();\n        let contract_address = self.this_address();\n        let len = log.len() as Field + 4;\n        let side_effect = EncryptedLogHash { value: log_hash, counter, length: len, randomness };\n        self.encrypted_logs_hashes.push(side_effect);\n\n        emit_encrypted_event_log(contract_address, randomness, log, counter);\n    }\n\n    pub fn emit_raw_note_log<let M: u32>(&mut self, note_hash_counter: u32, log: [u8; M], log_hash: Field) {\n        let counter = self.next_counter();\n        let len = log.len() as Field + 4;\n        let side_effect = NoteLogHash { value: log_hash, counter, length: len, note_hash_counter };\n        self.note_encrypted_logs_hashes.push(side_effect);\n\n        emit_encrypted_note_log(note_hash_counter, log, counter);\n    }\n\n    pub fn call_private_function<let ARGS_COUNT: u32>(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field; ARGS_COUNT]\n    ) -> PackedReturns {\n        let args_hash = hash_args_array(args);\n        assert(args_hash == arguments::pack_arguments_array(args));\n        self.call_private_function_with_packed_args(contract_address, function_selector, args_hash, false, false)\n    }\n\n    pub fn static_call_private_function<let ARGS_COUNT: u32>(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field; ARGS_COUNT]\n    ) -> PackedReturns {\n        let args_hash = hash_args_array(args);\n        assert(args_hash == arguments::pack_arguments_array(args));\n        self.call_private_function_with_packed_args(contract_address, function_selector, args_hash, true, false)\n    }\n\n    pub fn delegate_call_private_function<let ARGS_COUNT: u32>(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field; ARGS_COUNT]\n    ) -> PackedReturns {\n        let args_hash = hash_args_array(args);\n        assert(args_hash == arguments::pack_arguments_array(args));\n        self.call_private_function_with_packed_args(contract_address, function_selector, args_hash, false, true)\n    }\n\n    pub fn call_private_function_no_args(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector\n    ) -> PackedReturns {\n        self.call_private_function_with_packed_args(contract_address, function_selector, 0, false, false)\n    }\n\n    pub fn static_call_private_function_no_args(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector\n    ) -> PackedReturns {\n        self.call_private_function_with_packed_args(contract_address, function_selector, 0, true, false)\n    }\n\n    pub fn delegate_call_private_function_no_args(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector\n    ) -> PackedReturns {\n        self.call_private_function_with_packed_args(contract_address, function_selector, 0, false, true)\n    }\n\n    pub fn call_private_function_with_packed_args(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args_hash: Field,\n        is_static_call: bool,\n        is_delegate_call: bool\n    ) -> PackedReturns {\n        let mut is_static_call = is_static_call | self.inputs.call_context.is_static_call;\n        let start_side_effect_counter = self.side_effect_counter;\n        let (end_side_effect_counter, returns_hash) = call_private_function_internal(\n            contract_address,\n            function_selector,\n            args_hash,\n            start_side_effect_counter,\n            is_static_call,\n            is_delegate_call\n        );\n\n        self.side_effect_counter = end_side_effect_counter + 1;\n\n        // TODO (fees) figure out why this crashes the prover and enable it\n        // we need this in order to pay fees inside child call contexts\n        // assert(\n        //     (item.public_inputs.min_revertible_side_effect_counter == 0 as u32)\n        //     | (item.public_inputs.min_revertible_side_effect_counter\n        //         > self.min_revertible_side_effect_counter)\n        // );\n\n        // if item.public_inputs.min_revertible_side_effect_counter\n        //     > self.min_revertible_side_effect_counter {\n        //     self.min_revertible_side_effect_counter = item.public_inputs.min_revertible_side_effect_counter;\n        // }\n\n        let call_context = self.generate_call_context(\n            contract_address,\n            function_selector,\n            is_static_call,\n            is_delegate_call\n        );\n\n        self.private_call_requests.push(\n            PrivateCallRequest {\n            contract_address,\n            call_context,\n            args_hash,\n            returns_hash,\n            start_side_effect_counter,\n            end_side_effect_counter\n        }\n        );\n\n        PackedReturns::new(returns_hash)\n    }\n\n    pub fn call_public_function<let ARGS_COUNT: u32>(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field; ARGS_COUNT]\n    ) {\n        let args_hash = hash_args_array(args);\n        assert(args_hash == arguments::pack_arguments_array(args));\n        self.call_public_function_with_packed_args(contract_address, function_selector, args_hash, false, false)\n    }\n\n    pub fn static_call_public_function<let ARGS_COUNT: u32>(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field; ARGS_COUNT]\n    ) {\n        let args_hash = hash_args_array(args);\n        assert(args_hash == arguments::pack_arguments_array(args));\n        self.call_public_function_with_packed_args(contract_address, function_selector, args_hash, true, false)\n    }\n\n    pub fn delegate_call_public_function<let ARGS_COUNT: u32>(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field; ARGS_COUNT]\n    ) {\n        let args_hash = hash_args_array(args);\n        assert(args_hash == arguments::pack_arguments_array(args));\n        self.call_public_function_with_packed_args(contract_address, function_selector, args_hash, false, true)\n    }\n\n    pub fn call_public_function_no_args(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector\n    ) {\n        self.call_public_function_with_packed_args(contract_address, function_selector, 0, false, false)\n    }\n\n    pub fn static_call_public_function_no_args(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector\n    ) {\n        self.call_public_function_with_packed_args(contract_address, function_selector, 0, true, false)\n    }\n\n    pub fn delegate_call_public_function_no_args(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector\n    ) {\n        self.call_public_function_with_packed_args(contract_address, function_selector, 0, false, true)\n    }\n\n    pub fn call_public_function_with_packed_args(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args_hash: Field,\n        is_static_call: bool,\n        is_delegate_call: bool\n    ) {\n        let counter = self.next_counter();\n\n        let mut is_static_call = is_static_call | self.inputs.call_context.is_static_call;\n        enqueue_public_function_call_internal(\n            contract_address,\n            function_selector,\n            args_hash,\n            counter,\n            is_static_call,\n            is_delegate_call\n        );\n\n        let call_context = self.generate_call_context(\n            contract_address,\n            function_selector,\n            is_static_call,\n            is_delegate_call\n        );\n\n        let call_request = PublicCallRequest { contract_address, call_context, args_hash, counter };\n        self.public_call_requests.push(call_request);\n    }\n\n    pub fn set_public_teardown_function<let ARGS_COUNT: u32>(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field; ARGS_COUNT]\n    ) {\n        let args_hash = hash_args_array(args);\n        assert(args_hash == arguments::pack_arguments_array(args));\n        self.set_public_teardown_function_with_packed_args(contract_address, function_selector, args_hash, false, false)\n    }\n\n    pub fn set_public_teardown_function_with_packed_args(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args_hash: Field,\n        is_static_call: bool,\n        is_delegate_call: bool\n    ) {\n        let counter = self.next_counter();\n\n        let mut is_static_call = is_static_call | self.inputs.call_context.is_static_call;\n        set_public_teardown_function_call_internal(\n            contract_address,\n            function_selector,\n            args_hash,\n            counter,\n            is_static_call,\n            is_delegate_call\n        );\n\n        let call_context = self.generate_call_context(\n            contract_address,\n            function_selector,\n            is_static_call,\n            is_delegate_call\n        );\n\n        self.public_teardown_call_request = PublicCallRequest {\n            contract_address,\n            call_context,\n            args_hash,\n            counter,\n        };\n    }\n\n    fn generate_call_context(\n        self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        is_static_call: bool,\n        is_delegate_call: bool\n    ) -> CallContext {\n        let msg_sender = if is_delegate_call {\n            self.msg_sender()\n        } else {\n            self.this_address()\n        };\n        let storage_contract_address = if is_delegate_call {\n            self.this_address()\n        } else {\n            contract_address\n        };\n        CallContext { msg_sender, storage_contract_address, function_selector, is_static_call, is_delegate_call }\n    }\n\n    fn next_counter(&mut self) -> u32 {\n        let counter = self.side_effect_counter;\n        self.side_effect_counter += 1;\n        counter\n    }\n}\n\nimpl Empty for PrivateContext {\n    fn empty() -> Self {\n        PrivateContext {\n            inputs: PrivateContextInputs::empty(),\n            side_effect_counter: 0 as u32,\n            min_revertible_side_effect_counter: 0 as u32,\n            is_fee_payer: false,\n            args_hash: 0,\n            return_hash: 0,\n            max_block_number: MaxBlockNumber::empty(),\n            note_hash_read_requests: BoundedVec::new(),\n            nullifier_read_requests: BoundedVec::new(),\n            key_validation_requests_and_generators: BoundedVec::new(),\n            note_hashes: BoundedVec::new(),\n            nullifiers: BoundedVec::new(),\n            private_call_requests: BoundedVec::new(),\n            public_call_requests: BoundedVec::new(),\n            public_teardown_call_request: PublicCallRequest::empty(),\n            l2_to_l1_msgs: BoundedVec::new(),\n            historical_header: Header::empty(),\n            note_encrypted_logs_hashes: BoundedVec::new(),\n            encrypted_logs_hashes: BoundedVec::new(),\n            unencrypted_logs_hashes: BoundedVec::new(),\n            last_key_validation_requests: [Option::none(); NUM_KEY_TYPES]\n        }\n    }\n}\n"}}}